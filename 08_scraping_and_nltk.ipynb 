{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Investigating texts from Project Gutenberg\n",
    "\n",
    "![](images/gutenberg.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import requests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from bs4 import BeautifulSoup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "url = \"http://www.gutenberg.org/files/15784/15784-0.txt\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "response = requests.get(url)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "requests.models.Response"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(response)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Response [200]>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "response"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "soup_dos = BeautifulSoup(response.content, \"html.parser\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(soup_dos)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "dos_text = soup_dos.get_text()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(dos_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "550924"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(dos_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'The Project Gutenberg EBook of The Chronology of Ancient Kingdoms Amended\\r\\nby Isaac Newton\\r\\n\\r\\nThis e'"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dos_text[:100]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Analyzing the Text with NLTK\n",
    "\n",
    "The Natural Language Toolkit is a popular Python library for text analysis.  We will use it to split the text into individual words(tokens), and create a plot of the frequency distribution of the tokens.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import nltk\n",
    "from nltk import word_tokenize\n",
    "tokens = word_tokenize(dos_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['The',\n",
       " 'Project',\n",
       " 'Gutenberg',\n",
       " 'EBook',\n",
       " 'of',\n",
       " 'The',\n",
       " 'Chronology',\n",
       " 'of',\n",
       " 'Ancient',\n",
       " 'Kingdoms']"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tokens[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "text = nltk.Text(tokens)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['The',\n",
       " 'Project',\n",
       " 'Gutenberg',\n",
       " 'EBook',\n",
       " 'of',\n",
       " 'The',\n",
       " 'Chronology',\n",
       " 'of',\n",
       " 'Ancient',\n",
       " 'Kingdoms']"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "text[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "fdist = nltk.FreqDist(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "nltk.probability.FreqDist"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(fdist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(',', 8704),\n",
       " ('the', 7568),\n",
       " ('and', 5062),\n",
       " ('of', 5017),\n",
       " ('.', 3525),\n",
       " ('in', 1805),\n",
       " ('to', 1508),\n",
       " (';', 1200),\n",
       " (':', 1158),\n",
       " ('[', 1023),\n",
       " (']', 1023),\n",
       " ('that', 1004),\n",
       " ('by', 970),\n",
       " ('was', 941),\n",
       " ('a', 804),\n",
       " ('his', 703),\n",
       " ('with', 612),\n",
       " ('or', 588),\n",
       " ('years', 567),\n",
       " ('from', 531),\n",
       " ('for', 482),\n",
       " ('were', 455),\n",
       " ('their', 405),\n",
       " ('is', 394),\n",
       " ('he', 392),\n",
       " ('this', 389),\n",
       " ('year', 384),\n",
       " ('_Egypt_', 380),\n",
       " ('King', 378),\n",
       " ('which', 373),\n",
       " ('as', 373),\n",
       " ('at', 357),\n",
       " ('after', 348),\n",
       " ('they', 345),\n",
       " ('into', 342),\n",
       " ('it', 341),\n",
       " ('who', 322),\n",
       " ('l.', 313),\n",
       " ('son', 310),\n",
       " ('be', 303),\n",
       " ('Reign', 290),\n",
       " ('before', 284),\n",
       " ('Kings', 265),\n",
       " ('first', 261),\n",
       " ('about', 258),\n",
       " ('had', 250),\n",
       " ('not', 250),\n",
       " ('but', 242),\n",
       " ('The', 236),\n",
       " ('one', 235)]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fdist.most_common(50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fdist['blood']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "fdist = nltk.FreqDist(word.lower() for word in word_tokenize(dos_text))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a0bee7eb8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "fdist.plot(30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nm0Ck3fZEkwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a0ca383c8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "fdist.plot(30, cumulative=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "tagged = nltk.pos_tag(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('The', 'DT'),\n",
       " ('Project', 'NNP'),\n",
       " ('Gutenberg', 'NNP'),\n",
       " ('EBook', 'NNP'),\n",
       " ('of', 'IN'),\n",
       " ('The', 'DT'),\n",
       " ('Chronology', 'NNP'),\n",
       " ('of', 'IN'),\n",
       " ('Ancient', 'NNP'),\n",
       " ('Kingdoms', 'NNP')]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tagged[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "and king into reign city or in the of to first people empire temple\n",
      "history kings year reigns place expedition\n"
     ]
    }
   ],
   "source": [
    "text.similar(\"god\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "now_of only_of the_and\n"
     ]
    }
   ],
   "source": [
    "text.common_contexts([\"king\", \"lord\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nMTOzWhxAzMysFgcQMzOrxQHEzMxqmdMBRGJQ4r3d2n5/P0iN16JF6bVgQXoNDzemjYykZQYH07yR\nkca84eHG9MHBxvv+/vRatKjxfmSk8RocTGWWZcq2pUb5pS79/Wk7ZRv9/Y1tDQ426lrya5Wyq69S\nRrUt5fPoaHovjd3O4GAqt/RPKbfUs5QzMtKYNjycXqOjW9ajtKlsr9pvpZ/7+9P80kelvVJj3Mq8\n0t5Sp1LX8qr2V2lfmV76cMGCsWWU96U/S99W21DaVh1raLSr1L/0SVmu9GG1L8vYtBqz6jaqY93c\nL6W8/v7G/lnaXKaPjDTaUqaVVxm30q+t9ttSVple6lvdH0sbyzhXx6u0qYxD6cfR0Ub/VutaPkNj\nHEodyneoWsfS79XvZLW/yn5e/U43f4+a+6mMTbX9w8ONbZY+KOWVdWaq9FF1n271e9VuczonusQw\ncGYEe9dZf8mSJTGThFKzMdBzUcTW1bbZaG+1jLrlzed+r2u2x6ZXzPRnd6rtrbsdSZdGxJLJlpvr\nGQmPA/aQWA/8ME87DAjgUxGc2rWamZlt5eb0KSxgJfDLCPYD1gL7AfsCLwOOl9i5eQVJx0haJ2nd\n7bff3tnampltReZ6AKlaCpwSwSMR3AacA7ygeaGI+HJELImIJTvsMGlOeDMzq6mXAkiPneU0M5vf\n5noAuQd4Yn5/LnCExEKJHYBDgIvbufG+vrGfFy5Mr3KXw9BQY9qyZWmZgYE0b9myxryhocb0gYHG\n+76+9Fq4sPF+2bLGa2CgUY/qtqFRfqlLX1/aTtlGX19jWwMDjboODTXq2aq9Q0Nj21I+r1rVWLe6\nnYGBVG7pn1Ju9SLfwEAqo0wbGkqvVau2rEdpU9letd9KP/f1pfmlj0p7q+0o80qdS51KXavTyvrN\ny5Y+rLal+r70Z+nb6vTStupYQ6Ndpf6lvLJc6cNqX5Y2tRqz6jaqY93cL6W8vr7G/lnaXKYvW9Zo\nS5lWXmXcSr+22m9LWWV6qW91fyxtrO7LZf2ijEPpx1WrGv1brWv5XNYpr7K/le9IqWPp9+p3stpf\nZT+vfqebv0fN/VStfylnaKixzVK/Ul7z/ldX6aPqPt3q96rd5vRdWAASJwPPA76fJ035IvpM78Iy\nM9sazZe7sIjgTU2TPtyVipiZ2Rhz/RSWmZnNUQ4gZmZWiwOImZnV4gBiZma1OICYmVktDiBmZlaL\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a19545208>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "text.dispersion_plot(tokens[500:510])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "106732"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['!',\n",
       " '#',\n",
       " '$',\n",
       " '%',\n",
       " '&',\n",
       " \"'\",\n",
       " \"''\",\n",
       " \"'AS-IS\",\n",
       " \"'Till\",\n",
       " \"'d\",\n",
       " \"'s\",\n",
       " \"'till\",\n",
       " '(',\n",
       " ')',\n",
       " '*',\n",
       " '***',\n",
       " '*****',\n",
       " ',',\n",
       " '-',\n",
       " '--',\n",
       " '.',\n",
       " '//gutenberg.net/license',\n",
       " '//pglaf.org',\n",
       " '//pglaf.org/donate',\n",
       " '//pglaf.org/fundraising',\n",
       " '//www.gutenberg.net',\n",
       " '//www.gutenberg.org/1/5/7/8/15784/',\n",
       " '//www.pglaf.org',\n",
       " '00',\n",
       " '1',\n",
       " '1.',\n",
       " '1.A',\n",
       " '1.B',\n",
       " '1.C',\n",
       " '1.D',\n",
       " '1.E',\n",
       " '1.E.1',\n",
       " '1.E.2',\n",
       " '1.E.3',\n",
       " '1.E.4',\n",
       " '1.E.5',\n",
       " '1.E.6',\n",
       " '1.E.7',\n",
       " '1.E.8',\n",
       " '1.E.9',\n",
       " '1.F',\n",
       " '1.F.1',\n",
       " '1.F.2',\n",
       " '1.F.3',\n",
       " '1.F.4',\n",
       " '1.F.5',\n",
       " '1.F.6',\n",
       " '10',\n",
       " '10.',\n",
       " '100',\n",
       " '10000',\n",
       " '1002',\n",
       " '1005',\n",
       " '1006',\n",
       " '1007',\n",
       " '1008',\n",
       " '101',\n",
       " '1010',\n",
       " '1014',\n",
       " '1015',\n",
       " '1017',\n",
       " '1019',\n",
       " '102',\n",
       " '1020',\n",
       " '1028',\n",
       " '103',\n",
       " '1030',\n",
       " '1034',\n",
       " '1035',\n",
       " '1039',\n",
       " '104',\n",
       " '1043',\n",
       " '1045',\n",
       " '1046',\n",
       " '1047',\n",
       " '1048',\n",
       " '105',\n",
       " '1052',\n",
       " '1053',\n",
       " '1059',\n",
       " '105th',\n",
       " '106',\n",
       " '1060',\n",
       " '1069',\n",
       " '107',\n",
       " '1070',\n",
       " '108',\n",
       " '1080',\n",
       " '1085',\n",
       " '109',\n",
       " '1090',\n",
       " '11',\n",
       " '11.',\n",
       " '110',\n",
       " '1100',\n",
       " '11000',\n",
       " '111',\n",
       " '112',\n",
       " '1125',\n",
       " '113',\n",
       " '11340',\n",
       " '114',\n",
       " '115',\n",
       " '116',\n",
       " '117',\n",
       " '118',\n",
       " '119',\n",
       " '11th',\n",
       " '11⅔',\n",
       " '12',\n",
       " '12.',\n",
       " '120',\n",
       " '12000',\n",
       " '120000',\n",
       " '121',\n",
       " '122',\n",
       " '1224',\n",
       " '123',\n",
       " '1236',\n",
       " '124',\n",
       " '125',\n",
       " '126',\n",
       " '127',\n",
       " '128',\n",
       " '129',\n",
       " '12th',\n",
       " '13',\n",
       " '13.',\n",
       " '130',\n",
       " '131',\n",
       " '132',\n",
       " '133',\n",
       " '134',\n",
       " '1340',\n",
       " '135',\n",
       " '136',\n",
       " '1360',\n",
       " '137',\n",
       " '138',\n",
       " '139',\n",
       " '13th',\n",
       " '13°',\n",
       " '14',\n",
       " '14.',\n",
       " '140',\n",
       " '141',\n",
       " '142',\n",
       " '143',\n",
       " '144',\n",
       " '145',\n",
       " '146',\n",
       " '146½',\n",
       " '147',\n",
       " '148',\n",
       " '149',\n",
       " '14th',\n",
       " '15',\n",
       " '15.',\n",
       " '150',\n",
       " '1500',\n",
       " '15000',\n",
       " '150th',\n",
       " '151',\n",
       " '152',\n",
       " '153',\n",
       " '154',\n",
       " '155',\n",
       " '156',\n",
       " '157',\n",
       " '15784',\n",
       " '15784-0.txt',\n",
       " '15784-0.zip',\n",
       " '158',\n",
       " '159',\n",
       " '15th',\n",
       " '15¼',\n",
       " '16',\n",
       " '16.',\n",
       " '160',\n",
       " '160th',\n",
       " '161',\n",
       " '162',\n",
       " '163',\n",
       " '164',\n",
       " '1643',\n",
       " '165',\n",
       " '166',\n",
       " '167',\n",
       " '168',\n",
       " '1689',\n",
       " '169',\n",
       " '1690',\n",
       " '16th',\n",
       " '17',\n",
       " '17.',\n",
       " '170',\n",
       " '17000',\n",
       " '171',\n",
       " '172',\n",
       " '173',\n",
       " '174',\n",
       " '175',\n",
       " '176',\n",
       " '176th',\n",
       " '177',\n",
       " '178',\n",
       " '179',\n",
       " '17th',\n",
       " '17¼',\n",
       " '18',\n",
       " '18.',\n",
       " '180',\n",
       " '180000',\n",
       " '181',\n",
       " '182',\n",
       " '183',\n",
       " '184',\n",
       " '185',\n",
       " '185000',\n",
       " '186',\n",
       " '187',\n",
       " '187½',\n",
       " '188',\n",
       " '189',\n",
       " '18th',\n",
       " '18¾',\n",
       " '19',\n",
       " '19.',\n",
       " '19.-22',\n",
       " '190',\n",
       " '1903',\n",
       " '191',\n",
       " '192',\n",
       " '193',\n",
       " '194',\n",
       " '195',\n",
       " '196',\n",
       " '197',\n",
       " '198',\n",
       " '199',\n",
       " '19th',\n",
       " '19°',\n",
       " '19½',\n",
       " '2',\n",
       " '2.',\n",
       " '20',\n",
       " '20.',\n",
       " '200',\n",
       " '2001',\n",
       " '2005',\n",
       " '201',\n",
       " '202',\n",
       " '203',\n",
       " '204',\n",
       " '205',\n",
       " '206',\n",
       " '207',\n",
       " '208',\n",
       " '209',\n",
       " '20th',\n",
       " '21',\n",
       " '21.',\n",
       " '210',\n",
       " '211',\n",
       " '212',\n",
       " '213',\n",
       " '214',\n",
       " '215',\n",
       " '216',\n",
       " '217',\n",
       " '218',\n",
       " '219',\n",
       " '21st',\n",
       " '21½',\n",
       " '22',\n",
       " '22.',\n",
       " '220',\n",
       " '221',\n",
       " '222',\n",
       " '223',\n",
       " '224',\n",
       " '224th',\n",
       " '225',\n",
       " '226',\n",
       " '227',\n",
       " '228',\n",
       " '229',\n",
       " '22d',\n",
       " '22°',\n",
       " '23',\n",
       " '23.',\n",
       " '230',\n",
       " '231',\n",
       " '232',\n",
       " '233',\n",
       " '234',\n",
       " '235',\n",
       " '236',\n",
       " '237',\n",
       " '238',\n",
       " '239',\n",
       " '23d',\n",
       " '23°',\n",
       " '24',\n",
       " '24.',\n",
       " '240',\n",
       " '241',\n",
       " '242',\n",
       " '243',\n",
       " '244',\n",
       " '245',\n",
       " '246',\n",
       " '247',\n",
       " '248',\n",
       " '249',\n",
       " '24th',\n",
       " '24°',\n",
       " '25',\n",
       " '250',\n",
       " '251',\n",
       " '252',\n",
       " '253',\n",
       " '254',\n",
       " '255',\n",
       " '256',\n",
       " '257',\n",
       " '258',\n",
       " '259',\n",
       " '25th',\n",
       " '25°',\n",
       " '26',\n",
       " '26.',\n",
       " '260',\n",
       " '261',\n",
       " '262',\n",
       " '2627',\n",
       " '263',\n",
       " '264',\n",
       " '2645',\n",
       " '265',\n",
       " '266',\n",
       " '267',\n",
       " '268',\n",
       " '269',\n",
       " '26th',\n",
       " '27',\n",
       " '27.',\n",
       " '270',\n",
       " '271',\n",
       " '272',\n",
       " '273',\n",
       " '274',\n",
       " '275',\n",
       " '276',\n",
       " '277',\n",
       " '278',\n",
       " '279',\n",
       " '27th',\n",
       " '28',\n",
       " '28.',\n",
       " '280',\n",
       " '281',\n",
       " '282',\n",
       " '283',\n",
       " '284',\n",
       " '285',\n",
       " '286',\n",
       " '287',\n",
       " '288',\n",
       " '289',\n",
       " '28th',\n",
       " '28°',\n",
       " '29',\n",
       " '29.',\n",
       " '290',\n",
       " '291',\n",
       " '292',\n",
       " '293',\n",
       " '294',\n",
       " '295',\n",
       " '296',\n",
       " '297',\n",
       " '298',\n",
       " '299',\n",
       " '29th',\n",
       " '2°',\n",
       " '3',\n",
       " '3.',\n",
       " '30',\n",
       " '300',\n",
       " '3000',\n",
       " '30000',\n",
       " '301',\n",
       " '302',\n",
       " '303',\n",
       " '304',\n",
       " '305',\n",
       " '306',\n",
       " '307',\n",
       " '308',\n",
       " '309',\n",
       " '30th',\n",
       " '31',\n",
       " '310',\n",
       " '311',\n",
       " '312',\n",
       " '313',\n",
       " '314',\n",
       " '315',\n",
       " '316',\n",
       " '316th',\n",
       " '317',\n",
       " '318',\n",
       " '319',\n",
       " '32',\n",
       " '32.',\n",
       " '320',\n",
       " '321',\n",
       " '322',\n",
       " '323',\n",
       " '324',\n",
       " '325',\n",
       " '326',\n",
       " '327',\n",
       " '328',\n",
       " '329',\n",
       " '32d',\n",
       " '33',\n",
       " '33.',\n",
       " '330',\n",
       " '331',\n",
       " '332',\n",
       " '333',\n",
       " '334',\n",
       " '335',\n",
       " '336',\n",
       " '337',\n",
       " '338',\n",
       " '339',\n",
       " '33d',\n",
       " '34',\n",
       " '34.',\n",
       " '340',\n",
       " '341',\n",
       " '342',\n",
       " '343',\n",
       " '344',\n",
       " '345',\n",
       " '345._',\n",
       " '346',\n",
       " '346._',\n",
       " '347',\n",
       " '348',\n",
       " '349',\n",
       " '34°',\n",
       " '35',\n",
       " '350',\n",
       " '351',\n",
       " '352',\n",
       " '353',\n",
       " '354',\n",
       " '355',\n",
       " '356',\n",
       " '357',\n",
       " '358',\n",
       " '359',\n",
       " '35th',\n",
       " '36',\n",
       " '36.',\n",
       " '360',\n",
       " '361',\n",
       " '362',\n",
       " '363',\n",
       " '364',\n",
       " '365',\n",
       " '366',\n",
       " '367',\n",
       " '368',\n",
       " '369',\n",
       " '36°',\n",
       " '36½',\n",
       " '37',\n",
       " '370',\n",
       " '371',\n",
       " '372',\n",
       " '373',\n",
       " '374',\n",
       " '375',\n",
       " '376',\n",
       " '377',\n",
       " '378',\n",
       " '379',\n",
       " '37th',\n",
       " '37°',\n",
       " '37½',\n",
       " '38',\n",
       " '380',\n",
       " '381',\n",
       " '382',\n",
       " '383',\n",
       " '3830',\n",
       " '384',\n",
       " '385',\n",
       " '386',\n",
       " '387',\n",
       " '388',\n",
       " '389',\n",
       " '38th',\n",
       " '39',\n",
       " '390',\n",
       " '391',\n",
       " '392',\n",
       " '393',\n",
       " '394',\n",
       " '395',\n",
       " '396',\n",
       " '397',\n",
       " '398',\n",
       " '399',\n",
       " '3d',\n",
       " '3°',\n",
       " '4',\n",
       " '4.',\n",
       " '40',\n",
       " '40.',\n",
       " '400',\n",
       " '401',\n",
       " '402',\n",
       " '403',\n",
       " '404',\n",
       " '405',\n",
       " '406',\n",
       " '407',\n",
       " '408',\n",
       " '409',\n",
       " '40th',\n",
       " '41',\n",
       " '41.',\n",
       " '410',\n",
       " '411',\n",
       " '412',\n",
       " '413',\n",
       " '414',\n",
       " '415',\n",
       " '416',\n",
       " '417',\n",
       " '418',\n",
       " '419',\n",
       " '41st',\n",
       " '42',\n",
       " '420',\n",
       " '421',\n",
       " '422',\n",
       " '423',\n",
       " '424',\n",
       " '425',\n",
       " '426',\n",
       " '427',\n",
       " '428',\n",
       " '429',\n",
       " '43',\n",
       " '430',\n",
       " '431',\n",
       " '432',\n",
       " '433',\n",
       " '434',\n",
       " '435',\n",
       " '436',\n",
       " '437',\n",
       " '438',\n",
       " '439',\n",
       " '43d',\n",
       " '44',\n",
       " '440',\n",
       " '441',\n",
       " '442',\n",
       " '443',\n",
       " '444',\n",
       " '445',\n",
       " '446',\n",
       " '447',\n",
       " '448',\n",
       " '449',\n",
       " '44th',\n",
       " '45',\n",
       " '450',\n",
       " '451',\n",
       " '452',\n",
       " '453',\n",
       " '454',\n",
       " '455',\n",
       " '4557',\n",
       " '456',\n",
       " '4568',\n",
       " '457',\n",
       " '458',\n",
       " '459',\n",
       " '46',\n",
       " '460',\n",
       " '461',\n",
       " '462',\n",
       " '463',\n",
       " '464',\n",
       " '465',\n",
       " '466',\n",
       " '467',\n",
       " '468',\n",
       " '469',\n",
       " '46th',\n",
       " '47',\n",
       " '47.',\n",
       " '470',\n",
       " '471',\n",
       " '472',\n",
       " '473',\n",
       " '473000',\n",
       " '474',\n",
       " '475',\n",
       " '476',\n",
       " '477',\n",
       " '478',\n",
       " '479',\n",
       " '47th',\n",
       " '48',\n",
       " '480',\n",
       " '481',\n",
       " '482',\n",
       " '483',\n",
       " '484',\n",
       " '485',\n",
       " '486',\n",
       " '48th',\n",
       " '49',\n",
       " '491',\n",
       " '49th',\n",
       " '49⅓',\n",
       " '4th',\n",
       " '4°',\n",
       " '4½',\n",
       " '5',\n",
       " '5,000',\n",
       " '5.',\n",
       " '50',\n",
       " '500',\n",
       " '501',\n",
       " '504',\n",
       " '507',\n",
       " '508',\n",
       " '50th',\n",
       " '51',\n",
       " '513',\n",
       " '515',\n",
       " '52',\n",
       " '52.',\n",
       " '520',\n",
       " '521',\n",
       " '528',\n",
       " '529',\n",
       " '53',\n",
       " '530',\n",
       " '536',\n",
       " '538',\n",
       " '54',\n",
       " '544',\n",
       " '549',\n",
       " '55',\n",
       " '550',\n",
       " '555',\n",
       " '557',\n",
       " '56',\n",
       " '56.',\n",
       " '562',\n",
       " '568',\n",
       " '569',\n",
       " '57',\n",
       " '57.',\n",
       " '572',\n",
       " '58',\n",
       " '580',\n",
       " '580000',\n",
       " '584',\n",
       " '585',\n",
       " '586',\n",
       " '588',\n",
       " '59',\n",
       " '590',\n",
       " '596',\n",
       " '596-1887',\n",
       " '598',\n",
       " '599',\n",
       " '5th',\n",
       " '5°',\n",
       " '6',\n",
       " '6.',\n",
       " '60',\n",
       " '600',\n",
       " '6000',\n",
       " '601',\n",
       " '602',\n",
       " '604',\n",
       " '605',\n",
       " '606',\n",
       " '607',\n",
       " '609',\n",
       " '61',\n",
       " '610',\n",
       " '611',\n",
       " '614',\n",
       " '617',\n",
       " '618',\n",
       " '62',\n",
       " '621',\n",
       " '623',\n",
       " '625',\n",
       " '627',\n",
       " '63',\n",
       " '63.',\n",
       " '633',\n",
       " '635',\n",
       " '636',\n",
       " '64',\n",
       " '64-6221541',\n",
       " '640',\n",
       " '647',\n",
       " '648',\n",
       " '65',\n",
       " '652',\n",
       " '655',\n",
       " '657',\n",
       " '658',\n",
       " '65th',\n",
       " '66',\n",
       " '661',\n",
       " '668',\n",
       " '66½',\n",
       " '67',\n",
       " '67.',\n",
       " '671',\n",
       " '673',\n",
       " '676',\n",
       " '678',\n",
       " '68',\n",
       " '680',\n",
       " '681',\n",
       " '682',\n",
       " '684',\n",
       " '687',\n",
       " '68th',\n",
       " '69',\n",
       " '69.',\n",
       " '697',\n",
       " '698',\n",
       " '6°',\n",
       " '6½',\n",
       " '7',\n",
       " '7.',\n",
       " '70',\n",
       " '700000',\n",
       " '701',\n",
       " '705',\n",
       " '708',\n",
       " '71',\n",
       " '710',\n",
       " '711',\n",
       " '714',\n",
       " '717',\n",
       " '719',\n",
       " '72',\n",
       " '721',\n",
       " '729',\n",
       " '72d',\n",
       " '73',\n",
       " '730',\n",
       " '74',\n",
       " '740',\n",
       " '745',\n",
       " '747',\n",
       " '74th',\n",
       " '75',\n",
       " '751',\n",
       " '755',\n",
       " '75th',\n",
       " '76',\n",
       " '760',\n",
       " '761',\n",
       " '763',\n",
       " '76th',\n",
       " '77',\n",
       " '772',\n",
       " '773',\n",
       " '776',\n",
       " '77th',\n",
       " '78',\n",
       " '788',\n",
       " '78th',\n",
       " '79',\n",
       " '790',\n",
       " '792',\n",
       " '794',\n",
       " '7th',\n",
       " '7°',\n",
       " '8',\n",
       " '8.',\n",
       " '80',\n",
       " '801',\n",
       " '804',\n",
       " '808',\n",
       " '809',\n",
       " '81',\n",
       " '816',\n",
       " '817',\n",
       " '82',\n",
       " '820',\n",
       " '824',\n",
       " '825',\n",
       " '828',\n",
       " '83',\n",
       " '838',\n",
       " '83d',\n",
       " '84',\n",
       " '84116',\n",
       " '844',\n",
       " '85',\n",
       " '850',\n",
       " '852',\n",
       " '86',\n",
       " '860',\n",
       " '87',\n",
       " '870',\n",
       " '88',\n",
       " '88.',\n",
       " '883',\n",
       " '884',\n",
       " '887',\n",
       " '89',\n",
       " '895',\n",
       " '896',\n",
       " '8th',\n",
       " '8°',\n",
       " '9',\n",
       " '9.',\n",
       " '90',\n",
       " '9000',\n",
       " '901',\n",
       " '903',\n",
       " '904',\n",
       " '909',\n",
       " '91',\n",
       " '912',\n",
       " '918',\n",
       " '919',\n",
       " '92',\n",
       " '924',\n",
       " '925',\n",
       " '927',\n",
       " '928',\n",
       " '93',\n",
       " '930',\n",
       " '934',\n",
       " '936',\n",
       " '937',\n",
       " '938',\n",
       " '939',\n",
       " '94',\n",
       " '940',\n",
       " '942',\n",
       " '943',\n",
       " '944',\n",
       " '945',\n",
       " '946',\n",
       " '947',\n",
       " '95',\n",
       " '956',\n",
       " '958',\n",
       " '96',\n",
       " '960',\n",
       " '962',\n",
       " '963',\n",
       " '964',\n",
       " '965',\n",
       " '966',\n",
       " '967',\n",
       " '968',\n",
       " '97',\n",
       " '971',\n",
       " '974',\n",
       " '978',\n",
       " '979',\n",
       " '98',\n",
       " '980',\n",
       " '983',\n",
       " '987',\n",
       " '988',\n",
       " '989',\n",
       " '99',\n",
       " '990',\n",
       " '993',\n",
       " '994',\n",
       " '99712.',\n",
       " '9th',\n",
       " '9°',\n",
       " ':',\n",
       " ';',\n",
       " '>',\n",
       " '?',\n",
       " '@',\n",
       " 'A',\n",
       " 'ABCD',\n",
       " 'ABEF',\n",
       " 'ACTUAL',\n",
       " 'AGREE',\n",
       " 'AGREEMENT',\n",
       " 'AK',\n",
       " 'AMENDED',\n",
       " 'ANCIENT',\n",
       " 'AND',\n",
       " 'ANY',\n",
       " 'ANYTHING',\n",
       " 'ASCII',\n",
       " 'Ab',\n",
       " 'Abhorrence',\n",
       " 'Aborigines',\n",
       " 'About',\n",
       " 'Abstinentia',\n",
       " 'Abyden',\n",
       " 'Ac',\n",
       " 'Acra_',\n",
       " 'Acroasis_',\n",
       " 'Additional',\n",
       " 'Administration',\n",
       " 'Admiral',\n",
       " 'Admon',\n",
       " 'Adon_',\n",
       " 'Advertisement',\n",
       " 'Affection',\n",
       " 'Africa',\n",
       " 'Africam',\n",
       " 'After',\n",
       " 'Agatharc',\n",
       " 'Age',\n",
       " 'Ages',\n",
       " 'Agriculture',\n",
       " 'Al',\n",
       " 'Alcib',\n",
       " 'Alexander',\n",
       " 'Alexandrinus_',\n",
       " 'All',\n",
       " 'Altar',\n",
       " 'Altar._',\n",
       " 'Altars',\n",
       " 'Altitudes',\n",
       " 'Amazons_',\n",
       " 'Ambassador',\n",
       " 'Amended',\n",
       " 'Ammian',\n",
       " 'Ammon._',\n",
       " 'Ammon_',\n",
       " 'Among',\n",
       " 'Amos',\n",
       " 'Anaphe',\n",
       " 'Ancient',\n",
       " 'Ancients',\n",
       " 'And',\n",
       " 'Angel',\n",
       " 'Angle',\n",
       " 'Angles',\n",
       " 'Annal',\n",
       " 'Annals',\n",
       " 'Another',\n",
       " 'Ant',\n",
       " 'Antient',\n",
       " 'Antients',\n",
       " 'Antiq',\n",
       " 'Antiq._',\n",
       " 'Antiquities',\n",
       " 'Antiquity',\n",
       " 'Antistitem_',\n",
       " 'Any',\n",
       " 'Ap',\n",
       " 'Apion',\n",
       " 'Apollod',\n",
       " 'Apollodor',\n",
       " 'Apollon',\n",
       " 'Apollonii',\n",
       " 'Apologet',\n",
       " 'Apostles',\n",
       " 'Apparitionem',\n",
       " 'Appion',\n",
       " 'Apud',\n",
       " 'Aquarius',\n",
       " 'Arabumque',\n",
       " 'Archer',\n",
       " 'Architecture',\n",
       " 'Archive',\n",
       " 'Archives',\n",
       " ...]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted(set(text))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Lexical Richness of Text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0981149046209197"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(set(text))/len(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "265"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "text.count(\"Kings\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.24828542517707905"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*text.count(\"Kings\")/len(text)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Stopwords"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from nltk.corpus import stopwords"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'a',\n",
       " 'about',\n",
       " 'above',\n",
       " 'after',\n",
       " 'again',\n",
       " 'against',\n",
       " 'ain',\n",
       " 'all',\n",
       " 'am',\n",
       " 'an',\n",
       " 'and',\n",
       " 'any',\n",
       " 'are',\n",
       " 'aren',\n",
       " \"aren't\",\n",
       " 'as',\n",
       " 'at',\n",
       " 'be',\n",
       " 'because',\n",
       " 'been',\n",
       " 'before',\n",
       " 'being',\n",
       " 'below',\n",
       " 'between',\n",
       " 'both',\n",
       " 'but',\n",
       " 'by',\n",
       " 'can',\n",
       " 'couldn',\n",
       " \"couldn't\",\n",
       " 'd',\n",
       " 'did',\n",
       " 'didn',\n",
       " \"didn't\",\n",
       " 'do',\n",
       " 'does',\n",
       " 'doesn',\n",
       " \"doesn't\",\n",
       " 'doing',\n",
       " 'don',\n",
       " \"don't\",\n",
       " 'down',\n",
       " 'during',\n",
       " 'each',\n",
       " 'few',\n",
       " 'for',\n",
       " 'from',\n",
       " 'further',\n",
       " 'had',\n",
       " 'hadn',\n",
       " \"hadn't\",\n",
       " 'has',\n",
       " 'hasn',\n",
       " \"hasn't\",\n",
       " 'have',\n",
       " 'haven',\n",
       " \"haven't\",\n",
       " 'having',\n",
       " 'he',\n",
       " 'her',\n",
       " 'here',\n",
       " 'hers',\n",
       " 'herself',\n",
       " 'him',\n",
       " 'himself',\n",
       " 'his',\n",
       " 'how',\n",
       " 'i',\n",
       " 'if',\n",
       " 'in',\n",
       " 'into',\n",
       " 'is',\n",
       " 'isn',\n",
       " \"isn't\",\n",
       " 'it',\n",
       " \"it's\",\n",
       " 'its',\n",
       " 'itself',\n",
       " 'just',\n",
       " 'll',\n",
       " 'm',\n",
       " 'ma',\n",
       " 'me',\n",
       " 'mightn',\n",
       " \"mightn't\",\n",
       " 'more',\n",
       " 'most',\n",
       " 'mustn',\n",
       " \"mustn't\",\n",
       " 'my',\n",
       " 'myself',\n",
       " 'needn',\n",
       " \"needn't\",\n",
       " 'no',\n",
       " 'nor',\n",
       " 'not',\n",
       " 'now',\n",
       " 'o',\n",
       " 'of',\n",
       " 'off',\n",
       " 'on',\n",
       " 'once',\n",
       " 'only',\n",
       " 'or',\n",
       " 'other',\n",
       " 'our',\n",
       " 'ours',\n",
       " 'ourselves',\n",
       " 'out',\n",
       " 'over',\n",
       " 'own',\n",
       " 're',\n",
       " 's',\n",
       " 'same',\n",
       " 'shan',\n",
       " \"shan't\",\n",
       " 'she',\n",
       " \"she's\",\n",
       " 'should',\n",
       " \"should've\",\n",
       " 'shouldn',\n",
       " \"shouldn't\",\n",
       " 'so',\n",
       " 'some',\n",
       " 'such',\n",
       " 't',\n",
       " 'than',\n",
       " 'that',\n",
       " \"that'll\",\n",
       " 'the',\n",
       " 'their',\n",
       " 'theirs',\n",
       " 'them',\n",
       " 'themselves',\n",
       " 'then',\n",
       " 'there',\n",
       " 'these',\n",
       " 'they',\n",
       " 'this',\n",
       " 'those',\n",
       " 'through',\n",
       " 'to',\n",
       " 'too',\n",
       " 'under',\n",
       " 'until',\n",
       " 'up',\n",
       " 've',\n",
       " 'very',\n",
       " 'was',\n",
       " 'wasn',\n",
       " \"wasn't\",\n",
       " 'we',\n",
       " 'were',\n",
       " 'weren',\n",
       " \"weren't\",\n",
       " 'what',\n",
       " 'when',\n",
       " 'where',\n",
       " 'which',\n",
       " 'while',\n",
       " 'who',\n",
       " 'whom',\n",
       " 'why',\n",
       " 'will',\n",
       " 'with',\n",
       " 'won',\n",
       " \"won't\",\n",
       " 'wouldn',\n",
       " \"wouldn't\",\n",
       " 'y',\n",
       " 'you',\n",
       " \"you'd\",\n",
       " \"you'll\",\n",
       " \"you're\",\n",
       " \"you've\",\n",
       " 'your',\n",
       " 'yours',\n",
       " 'yourself',\n",
       " 'yourselves'}"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set(stopwords.words('english'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "stop_words = set(stopwords.words('english'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "filter_text = [word for word in text if not word in stop_words ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['The',\n",
       " 'Project',\n",
       " 'Gutenberg',\n",
       " 'EBook',\n",
       " 'The',\n",
       " 'Chronology',\n",
       " 'Ancient',\n",
       " 'Kingdoms',\n",
       " 'Amended',\n",
       " 'Isaac']"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filter_text[:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Lists Reminders"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "sent = ['Call', 'me', 'Ishmael', '.']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Call', 'me', 'Ishmael', '.']"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Call'"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sent[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "sent.append('stever')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Call', 'me', 'Ishmael', '.', 'stever']"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sent.index('stever')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### `set` and tokenizing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "saying = ['After', 'all', 'is', 'said', 'and', 'done', 'more', 'is', 'said',\n",
    "         'than', 'done']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "tokens = set(saying)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'After', 'all', 'and', 'done', 'is', 'more', 'said', 'than'}"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tokens"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "tokens = sorted(tokens)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['said', 'than']"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tokens[-2:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "long_words = [w for w in text if len(w)>15]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['www.gutenberg.net',\n",
       " '_Tiglathpilaser_',\n",
       " '_Misphragmuthosis_',\n",
       " '_Misphragmuthosis_',\n",
       " '_Misphragmuthosis_',\n",
       " '_Misphragmuthosis_',\n",
       " '_Tiglathpilasser_',\n",
       " '_Tiglathpilasser_',\n",
       " '_Tiglathpilasser_',\n",
       " '_Asserhadon-Pul_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " 'Halicarnassensis_',\n",
       " 'Halicarnassensis_',\n",
       " 'illuminationibus',\n",
       " 'illuminationibus',\n",
       " 'illuminationibus',\n",
       " 'Halicarnassensis_',\n",
       " '_Misphragmuthosis_',\n",
       " '_Misphragmuthosis_',\n",
       " '_Misphragmuthosis_',\n",
       " '_Misphragmuthosis_',\n",
       " 'fire-worshippers',\n",
       " '_Mediterranean__',\n",
       " '_Misphragmuthosis_',\n",
       " '_Misphragmuthosis_',\n",
       " '_Misphragmuthosis_',\n",
       " '_Tiglath-pileser_',\n",
       " '_Mediterranean__',\n",
       " '_Misphragmuthosis_',\n",
       " '_Tiglath-pileser_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Misphragmuthosis_',\n",
       " '_Misphragmuthosis_',\n",
       " '_Tiglath-Pul-Assur_',\n",
       " '_Assur-Hadon-Pul_',\n",
       " '_Nebo-Adon-Assur_',\n",
       " '_Nebo-Pul-Assur_',\n",
       " '_Nebo-Chaddon-Assur_',\n",
       " '_Nebo-Assur-Adon_',\n",
       " '_Nergal-Shar-Assur_',\n",
       " '_Labo-Assur-dach_',\n",
       " '_Merodach-Empad_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Tiglath-pilesar_',\n",
       " '_Tiglath-pileser_',\n",
       " '_Tiglath-pileser_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Tiglath-pileser_',\n",
       " 'Ναβουχοδονοσορον',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Tiglath-pileser_',\n",
       " '_Tiglath-pileser_',\n",
       " '_Tiglath-pileser_',\n",
       " '_Asserhadon-Pul_',\n",
       " '_Nabuchodonosor_',\n",
       " '__Nabuchodonosor_',\n",
       " '_Nabuchodonosor_',\n",
       " '_Nabuchodonosor_',\n",
       " '_Nabuchodonosor_',\n",
       " '_Nabuchodonosor_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Asserhadon-Pul_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " 'Under-Treasurers',\n",
       " 'treasure-chambers',\n",
       " 'treasure-chambers',\n",
       " 'treasure-chambers',\n",
       " '_Nebuchadnezzar_',\n",
       " 'treasure-chambers',\n",
       " 'Treasure-Chambers',\n",
       " 'incorruptissimum',\n",
       " 'prognostications',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Ecclesiasticus_',\n",
       " '_Nebuchadnezzar_',\n",
       " '_Nebuchadnezzar_',\n",
       " 'fire-worshippers',\n",
       " '_Nebuchadnezzar_',\n",
       " 'Lieutenant-General',\n",
       " '//www.gutenberg.org/1/5/7/8/15784/',\n",
       " '//gutenberg.net/license',\n",
       " 'trademark/copyright',\n",
       " 'www.gutenberg.net',\n",
       " 'www.gutenberg.net',\n",
       " 'unenforceability',\n",
       " '//pglaf.org/fundraising',\n",
       " '//pglaf.org/donate',\n",
       " '//www.gutenberg.net']"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "long_words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('more', 'is'), ('is', 'said'), ('said', 'than'), ('than', 'done')]"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(nltk.bigrams(['more', 'is', 'said', 'than', 'done']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Project Gutenberg-tm; _Red Sea_; _Anno Nabonass._; hundred years;\n",
      "Project Gutenberg; years a-piece; _Argonautic_ expedition; _Trojan_\n",
      "war; _Darius Hystaspis_; _Argonautic_ Expedition; _Assyrian_ Empire;\n",
      "Literary Archive; _Darius Nothus_; Gutenberg-tm electronic; lower\n",
      "_Egypt_; Archive Foundation; electronic works; Gutenberg Literary;\n",
      "_Peloponnesian_ war; _Jupiter Ammon_\n"
     ]
    }
   ],
   "source": [
    "text.collocations()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['austen-emma.txt',\n",
       " 'austen-persuasion.txt',\n",
       " 'austen-sense.txt',\n",
       " 'bible-kjv.txt',\n",
       " 'blake-poems.txt',\n",
       " 'bryant-stories.txt',\n",
       " 'burgess-busterbrown.txt',\n",
       " 'carroll-alice.txt',\n",
       " 'chesterton-ball.txt',\n",
       " 'chesterton-brown.txt',\n",
       " 'chesterton-thursday.txt',\n",
       " 'edgeworth-parents.txt',\n",
       " 'melville-moby_dick.txt',\n",
       " 'milton-paradise.txt',\n",
       " 'shakespeare-caesar.txt',\n",
       " 'shakespeare-hamlet.txt',\n",
       " 'shakespeare-macbeth.txt',\n",
       " 'whitman-leaves.txt']"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nltk.corpus.gutenberg.fileids()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Task\n",
    "\n",
    "1. Scrape and tokenize a text from project Gutenberg.\n",
    "\n",
    "2. Compare the most frequent occurring words with and without stopwords removed.\n",
    "\n",
    "3. Compare the top bigrams and trigrams for a second book.\n",
    "\n",
    "**Further Reading**:  http://www.nltk.org/book/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "url = \"http://www.gutenberg.org/cache/epub/2264/pg2264.txt\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "response = requests.get(url)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "requests.models.Response"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(response)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Response [200]>"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "response"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "soup_dos = BeautifulSoup(response.content, \"html.parser\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(soup_dos)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "dos_text = soup_dos.get_text()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(dos_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "119831"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(dos_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"***The Project Gutenberg's Etext of Shakespeare's First Folio***\\r\\n********************The Tragedie o\""
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dos_text[:100]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import nltk\n",
    "from nltk import word_tokenize\n",
    "tokens = word_tokenize(dos_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['***The',\n",
       " 'Project',\n",
       " 'Gutenberg',\n",
       " \"'s\",\n",
       " 'Etext',\n",
       " 'of',\n",
       " 'Shakespeare',\n",
       " \"'s\",\n",
       " 'First',\n",
       " 'Folio***']"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tokens[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "text = nltk.Text(tokens)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['***The',\n",
       " 'Project',\n",
       " 'Gutenberg',\n",
       " \"'s\",\n",
       " 'Etext',\n",
       " 'of',\n",
       " 'Shakespeare',\n",
       " \"'s\",\n",
       " 'First',\n",
       " 'Folio***']"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "text[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "fdist = nltk.FreqDist(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "nltk.probability.FreqDist"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(fdist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(',', 2116),\n",
       " ('.', 1341),\n",
       " ('the', 623),\n",
       " (':', 495),\n",
       " ('and', 429),\n",
       " ('of', 397),\n",
       " ('to', 374),\n",
       " ('I', 343),\n",
       " ('a', 255),\n",
       " ('?', 246),\n",
       " ('you', 233),\n",
       " ('is', 223),\n",
       " ('in', 195),\n",
       " (\"'d\", 192),\n",
       " ('not', 185),\n",
       " ('that', 174),\n",
       " ('my', 172),\n",
       " ('And', 170),\n",
       " ('it', 160),\n",
       " (\"'s\", 150),\n",
       " ('with', 142),\n",
       " ('be', 138),\n",
       " ('Macb', 137),\n",
       " ('The', 132),\n",
       " ('his', 130),\n",
       " ('your', 123),\n",
       " ('this', 118),\n",
       " ('haue', 117),\n",
       " ('our', 116),\n",
       " ('me', 113),\n",
       " ('for', 103),\n",
       " ('him', 92),\n",
       " ('Enter', 80),\n",
       " ('That', 80),\n",
       " ('To', 79),\n",
       " ('are', 78),\n",
       " ('he', 78),\n",
       " ('so', 77),\n",
       " ('What', 74),\n",
       " ('all', 73),\n",
       " ('as', 71),\n",
       " ('will', 70),\n",
       " ('we', 67),\n",
       " ('on', 66),\n",
       " ('they', 66),\n",
       " ('Macbeth', 64),\n",
       " ('do', 64),\n",
       " (\"'\", 64),\n",
       " ('or', 63),\n",
       " ('but', 63)]"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fdist.most_common(50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "64"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fdist['Macbeth']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "fdist = nltk.FreqDist(word.lower() for word in word_tokenize(dos_text))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAY8AAAEbCAYAAAAibQiyAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4wLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvpW3flQAAIABJREFUeJzt3Xl8XHW9//HXZ7I2bbpvgS5hKbSl\nFCRhUcALbizqZVEUvAgiWkXcvVfgqhdFvaIi/FQUZJNNUa6g0AKyyU5LmxYohRa60JbSfU3StFk/\nvz/OmfR0OpPMTDOZpHk/H4/zmDnf+Z7v+U46nc98l/M95u6IiIhkIpbvCoiISO+j4CEiIhlT8BAR\nkYwpeIiISMYUPEREJGMKHiIikjEFDxERyZiCh4iIZEzBQ0REMlaY7wrkyvDhw72ysjKrY3fs2EG/\nfv26LJ/KVJkqU2X2xDITzZ07d6O7j0grs7vvk1tVVZVnq6ampkvzqUyVqTJVZk8sMxFQ42l+x6rb\nSkREMqbgISIiGVPwEBGRjCl4iIhIxhQ8REQkYwoeIiKSMQWPiO2NLdQs38yijU35roqISI+m4BHx\n6qqtfPLGmdw5vy7fVRER6dEUPCLGD+sPwLr61jzXRESkZ1PwiBg9sJTighhbG9vY3tiS7+qIiPRY\nCh4RBTFjzNBgTZiVmxvyXBsRkZ5LwSPB+KFlAKzYpOAhIpKKgkeC+LjHys3b81wTEZGeS8EjwTi1\nPEREOqXgkWD8sCB4aMxDRCQ1BY8E8eChloeISGo5Cx5mNtbMnjKzhWb2upl9I0wfamaPm9ni8HFI\nmG5m9hszW2Jm883sqEhZF4b5F5vZhbmqM8CYIWUY8O7WHTS3tuXyVCIivVYuWx4twHfcfRJwHHCp\nmU0GLgeedPcJwJPhPsBpwIRwmwbcAEGwAa4EjgWOAa6MB5xcKC0qYGi/GK1tzuqtO3J1GhGRXi1n\nwcPd17j7vPB5HbAQ2B84A7gjzHYHcGb4/AzgzvBuiLOAwWZWAZwCPO7um919C/A4cGqu6g0wekAB\noK4rEZFULLhtbY5PYlYJPAtMAVa6++DIa1vcfYiZzQCudvfnw/QngcuAk4BSd/9JmP4DYIe7X5Pk\nPNMIWi1UVFRUTZ8+Pav6/nrmJp5d1cwXjxrIqQeVpczX0NBAWVnq17PJqzJVpspUmd1VZqLq6uq5\n7l6dVuZ0b3ae7QYMAOYCZ4f7WxNe3xI+PgScEEl/EqgC/gv4fiT9BwTdYR2et6qqKuubwF9x19M+\n/rIZ/pMZr3eYL983r1eZKlNlqsy9KTMRUONpfrfndLaVmRUB9wF/cvf7w+R1YXcU4eP6MH0VMDZy\n+BhgdQfpOaNuKxGRjuVytpUBtwIL3f3ayEsPAvEZUxcCD0TSLwhnXR0HbHP3NcCjwEfMbEg4UP6R\nMC1nRvUvBHSth4hIKoU5LPt44LPAa2b2Spj238DVwL1mdjGwEjgnfO1h4HRgCdAAXATg7pvN7MfA\nnDDfVe6+OYf1bm95rNzcgLsTxEEREYnLWfDwYOA71bfuB5Pkd+DSFGXdBtzWdbXr2IDiGIP6FbFt\nRzMb65sYUV7SXacWEekVdIV5CruWKdECiSIiiRQ8UtACiSIiqSl4pKA1rkREUlPwSGH80Ph9PRQ8\nREQSKXikMK695aExDxGRRAoeKei+HiIiqSl4pDCqvJTiwhgb65uob2zJd3VERHoUBY8UYjFrn3G1\nUoPmIiK7UfDowPihutZDRCQZBY8OjNN0XRGRpBQ8OhBveazQoLmIyG4UPDowflh4rYdaHiIiu1Hw\n6MDY9paHxjxERKIUPDowdmg/zGD11p00t7bluzoiIj2GgkcHSgoLqBhYSmub8+6WHfmujohIj6Hg\n0Yn2GVcaNBcRaZfL29DeZmbrzWxBJO2vZvZKuC2P32HQzCrNbEfktRsjx1SZ2WtmtsTMfmPdfFu/\n9gUStcaViEi7XN6G9nbgeuDOeIK7fzr+3Mx+BWyL5F/q7kcmKecGYBowi+BWtacCj+SgvknpWg8R\nkT3lrOXh7s8CSe81HrYePgXc01EZZlYBDHT3meFtau8EzuzqunZkvLqtRET2YMF3co4KN6sEZrj7\nlIT09wPXunt1JN/rwFtALfB9d3/OzKqBq939Q2G+E4HL3P1jKc43jaCVQkVFRdX06dOzqndDQwNl\nZUHQWLqlme8+sYlxAwu57pThKfNlUmZX5FOZKlNlqsy9LTNRdXX13Pj3cqfcPWcbUAksSJJ+A/Cd\nyH4JMCx8XgW8AwwEjgaeiOQ7EZiezrmrqqo8WzU1Ne3PtzY0+fjLZvjE7z/ibW1tKfNlUmZX5FOZ\nKlNlqsy9LTMRUONpfr93+2wrMysEzgb+Gk9z90Z33xQ+nwssBQ4BVgFjIoePAVZ3X21hUL8iBpcV\nsaO5lQ11jd15ahGRHisfU3U/BCxy91XxBDMbYWYF4fMDgQnAMndfA9SZ2XHhOMkFwAPdXWGtcSUi\nsrtcTtW9B5gJHGpmq8zs4vClc9lzoPz9wHwzexX4G/Bld48Ptl8C3AIsIWiRdNtMq7hx4RpXmnEl\nIhLI2VRddz8vRfrnkqTdB9yXIn8NMCXZa92l/b4eutZDRATQFeZp0VXmIiK7U/BIQ/uYh7qtREQA\nBY+0tN/XQy0PERFAwSMtI8tLKCmMsXl7E3U7m/NdHRGRvFPwSEMsZoxT15WISDsFjzTF17hS15WI\niIJH2sYN1bUeIiJxCh5p2tXy0LUeIiIKHmnSfT1ERHZR8EiTrvUQEdlFwSNNY4aUETNYs20HTS1t\n+a6OiEheKXikqbgwRsWgfrQ5rNqi1oeI9G0KHhnQLWlFRAIKHhlon3GlcQ8R6eMUPDIQv9ZDFwqK\nSF+n4JGB8ZquKyIC5PZOgreZ2XozWxBJ+6GZvWtmr4Tb6ZHXrjCzJWb2ppmdEkk/NUxbYmaX56q+\n6Yivb6ULBUWkr8tly+N24NQk6de5+5Hh9jCAmU0muD3tYeExvzezgvC+5r8DTgMmA+eFefNiXGR9\nK3fPVzVERPIuZ8HD3Z8FNneaMXAG8Bd3b3T3twnuV35MuC1x92Xu3gT8JcybFwNLixhSVsTO5jbW\n1zXmqxoiInlnufwFbWaVwAx3nxLu/xD4HFAL1ADfcfctZnY9MMvd7w7z3Qo8EhZzqrt/IUz/LHCs\nu381xfmmAdMAKioqqqZPn55VvRsaGigrK0v62uVPbmLx5mZ+fNJQKvu3pMyXSZnZ5FOZKlNlqsy9\nLTNRdXX1XHevTiuzu+dsAyqBBZH9UUABQYvnp8BtYfrvgPMj+W4FPgGcA9wSSf8s8Nt0zl1VVeXZ\nqqmpSfna1/48z8dfNsPvnbOyw3yZlJlNPpWpMlWmytzbMhMBNZ7m93u3zrZy93Xu3urubcDNBN1S\nAKuAsZGsY4DVHaTnje7rISLSzVN1zawisnsWEJ+J9SBwrpmVmNkBwARgNjAHmGBmB5hZMcGg+oPd\nWedEuqOgiAgU5qpgM7sHOAkYbmargCuBk8zsSMCB5cCXANz9dTO7F3gDaAEudffWsJyvAo8SdHfd\n5u6v56rO6Rg/LLwp1OYGoDSfVRERyZucBQ93Py9J8q0d5P8pwThIYvrDwMNdWLW9smuJku0oeIhI\nX6UrzDM0sryE0qIYWxqa2d6spdlFpG9S8MiQmbWPe6yrb81zbURE8kPBIwvxBRLXKniISB+l4JGF\n+LjH2u0tea6JiEh+KHhkIR481G0lIn2VgkcW4mMe6rYSkb5KwSML8Ws91G0lIn2VgkcW9h/cj5jB\npoY2GlvU+hCRvkfBIwvFhTH2G9wPB1Zt2ZHv6oiIdDsFjyxVhl1XyzfqroIi0vcoeGRpwqgBACxa\nW5fnmoiIdD8FjyxNqhgIwMI1tXmuiYhI91PwyNKk0UHwUMtDRPoiBY8sTRg1gBiwbEM9O5s140pE\n+hYFjyyVFhWwX3kBbQ6L19XnuzoiIt0qZ8HDzG4zs/VmtiCS9kszW2Rm883s72Y2OEyvNLMdZvZK\nuN0YOabKzF4zsyVm9hszs1zVOVPjBxcBGvcQkb4nly2P24FTE9IeB6a4+1TgLeCKyGtL3f3IcPty\nJP0GYBrBrWknJCkzbyoHBffSWrhWwUNE+paMg4eZDTGzqZ3lc/dngc0JaY+5e3xNj1nAmE7OVQEM\ndPeZ7u7AncCZmdY5V8YPDoOHWh4i0sekFTzM7GkzG2hmQ4FXgT+a2bV7ee7PA49E9g8ws5fN7Bkz\nOzFM2x9YFcmzKkzrESoHBd1Wi9bWEcQ2EZG+wdL50jOzl939PWb2BWCsu19pZvPD7qeOjqsEZrj7\nlIT07wHVwNnu7mZWAgxw901mVgX8AzgMOBT4mbt/KDzuROC77v7xFOebRtDFRUVFRdX06dM7fW/J\nNDQ0UFZW1mm+7du385XH66lvdm766AiGlRXsdZnp5lOZKlNlqsy9LTNRdXX1XHevTiuzu3e6Aa8B\nFcBjwNFh2vw0jqsEFiSkXQjMBMo6OO5pguBSASyKpJ8H/CGdOldVVXm2ampq0s736T+86OMvm+H/\nWriuy8pMl8pUmSpTZe5NmYmAGk/j+9Xd0x7z+BHwKLDE3eeY2YHA4jSPbWdmpwKXAf/u7g2R9BFm\nVhA+P5BgYHyZu68B6szsuHCW1QXAA5meN5cmhhcLvqFxDxHpQwrTzLfGI11U7r6sszEPM7sHOAkY\nbmargCsJZleVAI+HM25neTCz6v3AVWbWArQCX3b3+GD7JQQzt/oRjJFEx0nybnKFrjQXkb4n3eDx\nW+CoNNLauft5SZJvTZH3PuC+FK/VAFOSvdYTTKwoB2CRWh4i0od0GDzM7L3A+4ARZvbtyEsDgdSj\nw33IIaPKiRks27idnc2tlBbpzyIi+77OxjyKgQEEQaY8stUCn8xt1XqH0qICDhjen9Y2Z8l6LVMi\nIn1Dhy0Pd38GeMbMbnf3Fd1Up15nUsVAlm7Yzhtrapmy/6B8V0dEJOfSHfMoMbObCKbeth/j7h/I\nRaV6m0kVA5kxfw2L1mjQXET6hnSDx/8BNwK3EMyGkohJ4aC5likRkb4i3eDR4u435LQmvdjE9htD\n1eLu9KCFf0VEciLdiwSnm9lXzKzCzIbGt5zWrBepGFTKoH5FbGloZl1tY76rIyKSc+m2PC4MH/8r\nkubAgV1bnd7JzJg4upyX3t7MwrW1jB5Umu8qiYjkVFotD3c/IMmmwBExKbzSXOMeItIXpNXyMLML\nkqW7+51dW53ea1L7leaacSUi+750u62OjjwvBT4IzCO4OZOgloeI9C1pBQ93/1p038wGAXflpEa9\nlJYpEZG+JNt7mDcQLJsuIS1TIiJ9SbpjHtMJZldBsCDiJODeXFWqt5oYLlOyUMuUiMg+Lt0xj2si\nz1uAFe6+KlXmvmpyxUAemr+GhRo0F5F9XLpTdZ8BFhGsqDsEaMplpXqriaPDGVdrNWguIvu2tIKH\nmX0KmA2cA3wKeMnMOl2S3cxuM7P1ZrYgkjbUzB43s8Xh45Aw3czsN2a2xMzmm9lRkWMuDPMvNrML\nk52rJ4jOuApuBywism9Kd8D8e8DR7n6hu18AHAP8II3jbgdOTUi7HHjS3ScAT4b7AKcRDMJPAKYB\nN0AQbAhuYXtseN4r4wGnp6kYVMrA0kK2NDSzvk7LlIjIvivd4BFz9/WR/U3pHOvuzwKbE5LPAO4I\nn98BnBlJv9MDs4DBZlYBnAI87u6b3X0L8Dh7BqQewczaWx9v6HoPEdmHWTrdK2b2S2AqcE+Y9Glg\nvrtflsaxlcAMd58S7m9198GR17e4+xAzmwFc7e7Ph+lPApcBJwGl7v6TMP0HwA53v4YEZjaNoNVC\nRUVF1fTp0zt9b8k0NDRQVlaWVb5bX67l4SUNnH/4AM6aOKBLysxFPVWmylSZKjNRdXX1XHevTiuz\nu6fcgIOB48PnZwPXAtcB/wMc1NGxkTIqgQWR/a0Jr28JHx8CToikPwlUESzG+P1I+g+A73R23qqq\nKs9WTU1N1vn+MnuFj79shn/tz/O6rMy9zasyVabKVJnpAGo8je91d++06+n/AXVhkLnf3b/t7t8C\nHg5fy8a6sDuK8DHeHbYKGBvJNwZY3UF6jxS9t4eIyL6qs+BR6e7zExPdvYagRZGNB9m1xPuFwAOR\n9AvCWVfHAdvcfQ3wKPARMxsSDpR/JEzrkeLLlCzdECxTIiKyL+oseHR0Y4p+nRVuZvcAM4FDzWyV\nmV0MXA182MwWAx8O9yFozSwDlgA3A18BcPfNwI+BOeF2VZjWI/UrLqBSy5SIyD6usyvM55jZF939\n5mhiGATmdla4u5+X4qUPJsnrwKUpyrkNuK2z8/UUkyoGskzLlIjIPqyz4PFN4O9m9h/sChbVQDFw\nVi4r1ptNGl3OQ/PXsGitlikRkX1Th8HD3dcB7zOzk4EpYfJD7v6vnNesF9O9PURkX5fu/TyeAp7K\ncV32GRMTlikxszzXSESka2V7Pw/pwH6RZUo2aJkSEdkHKXjkgJm1tz60TImI7IsUPHJkckX8YkEN\nmovIvkfBI0fi9/bQoLmI7IsUPHIkPuNqke4qKCL7IAWPHNm1TEk9jS1apkRE9i0KHjkSX6akRcuU\niMg+SMEjhyaNjl/voa4rEdm3KHjk0KSKYNB8kQbNRWQfo+CRQ/F7eyzUvT1EZB+j4JFDk/bb1W3l\nadzuV0Skt1DwyKH4MiWbtzexdWdbvqsjItJlFDxyKLpMyfJtLXmujYhI1+n24GFmh5rZK5Gt1sy+\naWY/NLN3I+mnR465wsyWmNmbZnZKd9d5b0wKrzRfsbU5zzUREek6aS3J3pXc/U3gSAAzKwDeBf4O\nXARc5+7XRPOb2WTgXOAwYD/gCTM7xN17xZV3k9TyEJF9UL67rT4ILHX3FR3kOQP4i7s3uvvbBPc4\nP6ZbatcFDh8T3IZ2zupG3tnckOfaiIh0DcvnLCAzuw2Y5+7Xm9kPgc8BtUAN8B1332Jm1wOz3P3u\n8JhbgUfc/W9JypsGTAOoqKiomj59elb1amhooKysrMvyXTNzKzNX7eTwkcVc+f4hHd4cKt0yc1FP\nlakyVWbfKjNRdXX1XHevTiuzu+dlI7gP+kZgVLg/CiggaA39FLgtTP8dcH7kuFuBT3RWflVVlWer\npqamS/NtqNvph//gIR9/2Qy/a+byLikzk7wqU2WqTJWZDqDG0/wOz2e31WkErY51ENwv3d1b3b0N\nuJldXVOrgLGR48YAq7u1pntp+IASvnhU0H31s4cXqvtKRHq9fAaP84B74jtmVhF57SxgQfj8QeBc\nMysxswOACcDsbqtlF3nf2FJOP3w025taufz++bpoUER6tbwEDzMrAz4M3B9J/oWZvWZm84GTgW8B\nuPvrwL3AG8A/gUu9l8y0SnTVGVMY2r+YF5Zs4s+zV+a7OiIiWctL8HD3Bncf5u7bImmfdffD3X2q\nu/+7u6+JvPZTdz/I3Q9190fyUeeuMHxACVedcRgA//vQQlZtUfeViPRO+Z6q2+d89PAKTpsSdl/d\n95q6r0SkV1Lw6GZmxo/PnMKQsiKeX7KRe2a/k+8qiYhkTMEjD4LuqykA/PShN9R9JSK9joJHnnxs\nqrqvRKT3UvDIEzPjqjPUfSUivZOCRx6NKC/hR+q+EpFeSMEjzz4+tYJTDwu6r664X91XItI7KHjk\nWXT21XOLN/LE2zvyXSURkU4pePQA0e6rO16tY/G6ujzXSESkYwoePcTHp1Zw+uGj2dHinHvTLN5c\nqwAiIj2XgkcPYWZc+6kjOWJUMZu2N3HuTTN5Y3VtvqslIpKUgkcPUlpUwOXHD+HkQ0ewpaGZz9wy\niwXvbuv8QBGRbqbg0cMUFxg3fraKD00aydaGZj5z8yxefWdrvqslIrIbBY8eqKSwgN//RxWnHDaK\n2p0tnH/LS8xbuSXf1RIRaafg0UMVF8a4/jNH8dHDK6hrbOGCW2dTs3xzvqslIgIoePRoRQUxfn3u\nkXz8iP2ob2zhgttm89KyTfmulohI/oKHmS0P7xz4ipnVhGlDzexxM1scPg4J083MfmNmS8xsvpkd\nla96d7fCghjXfeoIznrP/jQ0tfK5P87hxaUb810tEenj8t3yONndj3T36nD/cuBJd58APBnuA5xG\ncO/yCcA04IZur2keFRbEuOacI/hk1Rh2NLfy+dvn8PxiBRARyZ98B49EZwB3hM/vAM6MpN/pgVnA\nYDOryEcF86UgZvziE1M59+ix7Gxu4/N3zOHRpQ1sa2jOd9VEpA+yfC3EZ2ZvA1sAB/7g7jeZ2VZ3\nHxzJs8Xdh5jZDOBqd38+TH8SuMzdaxLKnEbQMqGioqJq+vTpWdWtoaGBsrKyLsvXlWW2uXPLy7U8\nujRYA6vAYOqoYo4bU8qx+5VSXrLn74F81FNlqkyV2fPLTFRdXT030hPUMXfPywbsFz6OBF4F3g9s\nTcizJXx8CDghkv4kUNVR+VVVVZ6tmpqaLs3X1WW2tbX5vXNW+sd+9ZgfcPkMH39ZsB14xUN+/i2z\n/M8vrfBN9Y15r6fKVJkqs2eXmQio8TS/wwuzCk9dwN1Xh4/rzezvwDHAOjOrcPc1YbfU+jD7KmBs\n5PAxwOpurXAPYmacUz2WA209lYdO4bE31vHwa2t4cekmnlu8kecWb+T7/1jAew8cxmmHj6aipTXf\nVRaRfUxegoeZ9Qdi7l4XPv8IcBXwIHAhcHX4+EB4yIPAV83sL8CxwDZ3X9P9Ne95hg0o4bxjxnHe\nMePYsr2Jx95Yy8OvreWFJRt5PtxiwNELZnLqlNGcctho9hvcL9/VFpFeLl8tj1HA380sXoc/u/s/\nzWwOcK+ZXQysBM4J8z8MnA4sARqAi7q/yj3fkP7FfProcXz66HFsbWji8bBF8txbG3jp7c289PZm\nfjT9DY4YO5hTDxvNaVNGUzm8f76rLSK9UF6Ch7svA45Ikr4J+GCSdAcu7Yaq7TMGlxVzTvVYzqke\ny7Oz5rCldD8eeW0tT7+1nlff2cqr72zl5/9cxMTR5Zxy2GhOnTKaiaPL811tEekl8jbmId2nf1GM\n9x+5P2ccuT87mlp55q0NPPr6Wp5YuI5Fa+tYtLaOXz+5mMphZZwyvpCjjnLCVqGISFIKHn1Mv+IC\nTp0StDSaWtp4celGHn19LY+9vo7lmxr4wyZY2/YKPzv7cMqK9fEQkeR62kWC0o2KC2OcdOhIfnb2\nVGZ/70Nc9+kjKC0wHnhlNWf+7gWWbajPdxVFpIdS8BAguIL9rPeM4eoPDeOgEf15a109/379Czzy\nmia1icieFDxkN2MHFvLAV0/go4dXUN/YwiV/msdPH3qDlta2fFdNRHoQBQ/Zw4CSQq7/zHv4wccm\nUxgzbn7ubT5zy0usr92Z76qJSA+h4CFJmRkXn3AA90w7jpHlJcx+ezMf/e3zzH5bN6QSEQUP6cTR\nlUOZ8fUTOO7AoWyoa+S8m2dxy3PL4muMiUgfpeAhnRpZXsrdFx/Ll/7tQFrbnJ88tJBfztzK+jp1\nY4n0VQoekpbCghhXnDaJG8+vorykkJfebeTkXz7N755aws5mLbwo0tcoeEhGTp0ymhlfP4HqihK2\nN7Xyy0ff5IO/eobpr65WV5ZIH6LgIRkbP6w/V5wwhD994Vgmji7n3a07+No9L/PJG2fyyjtb8109\nEekGCh6SteMPHs5DXz+Rn519OMMHFDN3xRbO/N0LfPMvL7N66458V09EckjBQ/ZKQcw475hxPPWf\nJ3HJSQdRXBjjH6+s5gO/epprH3+LhqaWfFdRRHJAK99JlygvLeKyUyfymWPGcfU/F/HQ/DX85snF\n/HXOSo4ZXcDC5hVUDuvP+GFl7De4HwUxrdor0pspeEiXGju0jN995ig+977N/HjGG8xftY3ptTD9\nrQXteYoLYowd2o/KYf2pHN6fymFljB/Wn7r6Flpa2ygsUINYpKfr9uBhZmOBO4HRQBtwk7v/2sx+\nCHwR2BBm/W93fzg85grgYqAV+Lq7P9rd9ZbMHF05lH985XieWbyBJ+YspLl0MMs3NbBi03bW1Tay\ndMN2lm7YvsdxRY/9k7FDyhgfBpTKYWVhgOnP/kP6UaTAItIj5KPl0QJ8x93nmVk5MNfMHg9fu87d\nr4lmNrPJwLnAYcB+wBNmdoi76+KCHi4WM04+dCQD69+hqmrXjSMbmlpYEQaSeEB5e+N23lqzlc07\n2li2cTvLNm5n1++IQEHMGDOkH+OH9aewqZ6D1y1kcFkRQ8uKGVxWzJCyIob2D54PLitSoBHJoW4P\nHu6+BlgTPq8zs4XA/h0ccgbwF3dvBN42syXAMcDMnFdWcqKsuJBJFQOZVDFwt/S5c+dy2NQjWbm5\ngbc3bm8PLss3bmfFpgZWb9sRBp0GAP61fFmH5ykvLaQ01kb5009TXBCjpDBGSWEBxYWxYCuIUVK0\n69G211M3YD2TKwYyorxEd1MU6YDl88IuM6sEngWmAN8GPgfUAjUErZMtZnY9MMvd7w6PuRV4xN3/\nlqS8acA0gIqKiqrp06dnVa+GhgbKysq6LJ/K7Joym1qd9dtbWVPfwobanTRSSF2TU9fYRl1TG3WN\nbdQ2tVHf2EZ9k7M3i8iXFxvjBxUxfnAh4wcVMn5QEWMHFVJSYPvM31NlqsxE1dXVc929Op28eRsw\nN7MBwH3AN9291sxuAH4MePj4K+DzQLKff0kjnrvfBNwEUF1d7VVVVVnVbe7cuaRzbLr5VGb3l9nW\n5tTtbOGFmnkcMvEwGltaaWppo6mljcbwsak1vt/KjqZWZi9czqbWUhauqaV2ZwsLNjSxYENTe5kx\ng8rh/RlV0sLRh4zkoJEDOHjkAA4aMYDSooIe895VpsrM9rsvE3kJHmZWRBA4/uTu9wO4+7rI6zcD\nM8LdVcDYyOFjgNXdVFXppWIxY1BZEaP6F3LwyAFpHXN46Waqqqpwd9bW7mTRmjoWrq1l0Zo6Fq2t\nZemG7SzbsJ1lwMxVS9qPM4OxQ8o4OAwmB48Y0B5YRPZV+ZhtZcCtwEJ3vzaSXhGOhwCcBcTndj4I\n/NnMriUYMJ8AzO7GKksfY2ZUDOpHxaB+nDxxZHt6Y0srS9bX8+is12jtP5wl6+tZsr6eFZsaWLk5\n2P61aP1uZRXHYPA/n2BQv6Lzy8EqAAAXe0lEQVTdtoEJ+xtW74ThWxhSVsSQsmIG9SsipmthpAfL\nR8vjeOCzwGtm9kqY9t/AeWZ2JEGX1HLgSwDu/rqZ3Qu8QTBT61LNtJJ8KCks4LD9BrFzfD+qqia2\npze1tLFi0/b2YLJkQ/C4dEM9O5vbWF/XyPq6xs5P8MKL7U9jBoP6BYFkSP9gJtngsmKG9i+mfnM9\nbzSv2D0YlRa2ByXNMpPukI/ZVs+TfBzj4Q6O+Snw05xVSmQvFBfGmDCqnAmjyndLd3denF3DgROn\nsG1HM9samtm2o5nanS3B/o5masPHFWs20lbUj60NTWze3kTtzha2NDSzpaEZNu55PQwLFuyZFupf\nXMCgfkX0L2jl+Hdfp2r8EKrGD2G/wf26+q1LH6YrzEVyxMwoLYy1d4F1JHGQs6W1jW07mtnS0BQE\nke1N7c/ffPsd+g0atlvwiQaj7U2tbG8KGueLX1zO7S8uB6BiUClHjR9C1bggmEzeb6BaKZI1BQ+R\nHqiwIMawASUMG1Cyx2tzB2ylqurwpMe1tTn1TS1sa2jm8VmvUF8ygrkrtjBv5RbWbNvJQ/PX8ND8\nYGixtCjG1DGDOWrcEFrrGngn9i7lpYUMKCmkvLSI8tLC9n0tGSOJFDxE9iGxmDGwtIiBpUUcMaqE\nqqoJQBBUlmyoZ+6KLUEwWbGFZRu3M/vtzcx+e3Nw8LxXUpbbr6iAAaWFFHoLA599luLC4KLL3S+4\nLKC4INb+2uaNtTyxYRFFMaMgFqOwwCgqMApjseCxIEZhzFi1cgfritfsKq9gV7klhQXt6SWFMVrb\ndMOxnkLBQ6QPiMWMQ0aVc8iocs47ZhwAm+obeXnlVl5dtZU3l79LSfkQ6nc2U7ezhfrGFup2tlC7\ns5n6xhZ2NLeyI7zd8Jr6uvRP/NbS9PLNnpd2kQMferR9GZohZUXhhILdn69Z28jOJRuJmRGzYGkb\nM6MgFuwH6cH+O7UtDN5Q3543ZkYsZhSE+/Hj6pqCrsTEMqLl9yUKHiJ91LABJXxo8ig+NHkUc+fW\nU1X1nqT53J3tTa3U72zhpXmvMuHQSe0XWAYXW7bS2BxcdNkYuRBz+cp3GF2xH82tbbS0Oi1tTktr\nGy1t3p7W3NbGug2bGDBwUMKFm227XdTZGF7MWb+zhdpwI1ymJqXnXkr/j/HoM+nle+CxDl+OGRTG\nYpQVwf4vPMeI8hJGDChhRHkJI8tLGFFeGqSF+72ZgoeIdMjMGFASjH2MGVjI5P0Gdn4QMHfuZqqq\nDk4jX/pXRM+uqeHgSVPZ0tAUzkxr3u351oZgYsHqDVsYMKCcVnfcnTaH1rbgeas7bW3Q5k5rm9Ow\nYwclJaXBfuS1tvC4trbgeVNzC7FYwa58HgTW1rbgOUCbEwTAVti6urbT91MUg7IZj1FaFKNfUQGl\n4davqIB+xQWUFsXa0zZvrOUf76SeZRe3YUMtYw/Zycjy0rT+ptlS8BCRXqPAjKH9g+tdOpKPZT/i\nQaalzXl21lxGH3AIG8JrfDZEtvV1O9lQ38j62kYaW9rCmXJpVRWWrkgr23/uaGFkeef59oaCh4hI\nF4jFjBhGYQEMKytg6pjBHeZ3d2bOmcvkKVODMaWmVnY2t7GjuZWd4dae3tLGihUrGDduXKf1WLly\nJSOSzNLragoeIiJ5YGaUFFhw/5k08s8t2khVVWXn+Yo3MaisaK/r1xlN3hYRkYwpeIiISMYUPERE\nJGMKHiIikjEFDxERyZiCh4iIZEzBQ0REMmbu++YqlWa2AUjvcsw9DQc2dmE+lakyVabK7IllJhrv\n7iPSyunh2i/adm1ATVfmU5kqU2WqzJ5Y5t5s6rYSEZGMKXiIiEjGFDySu6mL86lMlakyVWZPLDNr\n++yAuYiI5I5aHiIikjEFDxERyZiCh4iIZEw3g0rBzCqAze7emO+69EZmNgSYALTfSNndn92L8koS\n/y0S08xsKPBlYCdwi7t3fhPpPErnPYn0VGp5pHYXsMjMrukso5mN7ob6pDxfsvOb2Sgz+1i4jUzy\n+l3h4zdyUL8vAM8CjwI/Ch9/mCLvBcm2JFlnppF2HzAAGAPMNLMD06jr8WbWP3x+vplda2bjU+R9\nn5l9ppN6xoNYOjp9T2Z2dkdbknPv8e+Z6t843feTC5n83dMoK2Zmn0ozb4GZ3Z3NeTop81sZ5D++\nK9Mir51gZheFz0eY2QHp1ikr3XElYm/dAAMOSyPfQ0nSRgG3Ao+E+5OBixPy1AG1qbZ0z5dk/1ME\nS7PcAdwJvA18MiHPG8B44FVgCDA0uiXkfT5FfeuS1RN4jaDF8Uq4PxH4a4r38tvIdjOwDPhb5PXR\nQBWwEHgPcFS4nQQsSihrfuT5KcA7YV0+Atyb4vzzw3/nI8Ln3wCeSZLvLuBF4PeR+v4mRZmLgf8D\nTiec0Zjweibv6Y/h9hCwhSBA3gdsBu5PUva8JGkvZ/t+wr/HwPBvdCswD/hIB5/NTj/3mfzdw7y/\nCOtQBDxJsPTG+Ql5ns3g//WjQHGaeQ8EpofnXA88AByYJN/TGZw/2b9R1mlh+pVhPd8K9/cDXki3\nTtlsOSu4r2/AIwRf4q+G+4XAaynyXgV8BSgP/5NcAnx3L879KjAysj8iXo9I2tfDL69Ggi/s+PY2\nsGwv3/uc8PEVoCT+PM1jBwEPRvYvBJ4iCFRPRbYHgbMTjn0BqIzsG7A/UAZUpDjfvPDxf+Jfcin+\n0y4kSSBIUaYBHwbuAZYC/wscks17ihwzI/oegAoiwQM4L/zy2BKWE9+eAp7I9v1EPr+nhOUdkeoL\nLJPPfbp/9+hnBziL4AfR0CSf5x8A/wmMJcWPoEjePwBzwmO+Hd9S5J0FfDZ8H4XA+cBLSfL9FLge\nOJFdPwaOSsjzXuA7BD9qvh3Zfhh9P+nmS/wbhZ+7lyNp85Pl7apNYx65M9zd7zWzKwDcvcXMWlPk\nPcXdj43s32BmLxH84spGzN3XR/Y3kdBF6e6/AX5jZjcANwLvD1961t1fzfK8cavMbDDwD+BxM9sC\nrE7z2AaCsZJ4Pe8A7jCzT7j7fZ0c+3mgOHKsA+9Gyk2mLvw3Oh94v5kVEPzCTbSAoMWwprM3EJ73\ncYL3fjJwN/AVM3sVuDzD9xRX6e7Rc68DDonsvxjWbTjwq+j7I/hln+37sfDxdOCP7v6qmVkH+dP9\n3Kf7dyeSfjpwj7tvTlKFz4ePl0bSnKDlkGh1uMUIfrB1xNz9rsj+3Wb21ST53hc+XpVw/g9E9osJ\nulULE85bC3wyi3xRTe7uZhb8egm7BHNJwSN3tpvZMIIPEGZ2HLAtRd5WM/sP4C9h/vOAVIEmHY+Y\n2aMEv3wBPg08nCLvIoIvt/sJvijuMrOb3f232Z7c3c8Kn/7QzJ4iaE38M1leM5tO+DcCCoBJwL1J\nyrzPzD4KHMbug/BXRZ6/mUV1Pw18huDX71ozGwf8Mkm+4cAbZjaboLUWP+e/J3lPwwi+FC8A1gJf\nI/jVfiRBd1a8L/pJM7uWXYH7GeAqd0/2OXk68m/qwLkErYp4PVYQdFW+t6M3G/l7l6f5fuaa2WNh\nna8ws3KgrYNTpPu5T/fvDjDdzBYBOwiC8AiCSRHt3D3t/n13/1FYt/Jg1+sT80TGrZ4ys8vZ9X/z\n0wRdiIllnpzGeZ8BnjGz28N/r73Kl+BeM/sDMNjMvkgQTG9O89is6ArzHDGzowj6kacQ/MobQTDu\nsMevQDOrBH4NHE/wAX0B+Ka7L8/y3D8HXgJOIAgIzwLHuftlSfLOB97r7tvD/f7ATHefms25s6jr\nv0V2W4AV7r4qSb4bCbqfTgZuIfgFNtvdL85DPduF/9ET875FMKZwm7u/m/DaZe7+8/D5fQSfjTvC\nlz8LHOHuewyEh/nPYvcW4t8jrz3v7ieYWR27gjEE//7u7gM7eh+p3o+ZxQiC3jJ33xoGhv2TfY7D\n/PHP/WHA63Twuc+EBbP3at291czKgIHuvjbyetLBfne/M0lZUwj+feIBYiNwgbu/HsnzNsHfMVkr\ny919txaNmf1PivNflZgW/qDa44vX3T+QkG8E8F32/MH0AZIwsw8TjO8Z8Ki7P54sX1dR8MghMysE\nDiX4x3zT3Zu76bzz3P2ohLT5yQKCmb0GHO3uO8P9UoIxi8O7o67hOUcBR4e7sxO63OJ55rv71Mjj\nAII+/49kec60vmyzLPto4L8JJiS0t+4T//5m9oq7H9lZWi6Y2c8Tf0xE08xsorsvCoPBHtx9Xopy\nS4GvEoyR1BHMHvtt5PMV/1LekNBVm6ysD7j7vyzJrLKwDvdH8kZbyqXABwnGUPbo5jGzF4HvuftT\n4f5JwP+6+/sS86bLzL6TcP6PAQvd/fNJ8lYl5P0E0OLu303I9xjwV4KxnC8TjJVtSPYjMB/UbZVb\nxwCVBH/no8ws1S+hEcAXI3kBSPbB64iZXUIw8H5g2KKIKydozSTzR+AlM4v/ij2TYLZMtwinWP4S\neJrgi/u3ZvZf7v63hKw7wscGM9uPYBwn66mI7n5C+Nhhn3eWQeZugv/wC+i4i2eHmZ3g7s+H5zqe\nXe8zfv60v2wz9GEg8UvotEjat4Fp7D5+EpfYlx91J0Hf/P+G++cR/Mo/BzLrXgL+DfgX8PHIeSH8\n2xN0tRKW+7XogWY2KDxvMv3jgSM89ulUYwRmdinwJ3ffGu4PAc5z999H87n7rxKOu4agq3IP7j43\nIekFM9ujBQsMc/dbzewbka6sZPlI+HwWE4wTbd+bH0GdUfDIEQuuoziIYBZEfPzCCf5zJXoAeA54\ngr0b6/gzwWyXnwGXR9Lr3H1zsgPc/Voze5pdXVwXufvLe1GHTH2PoOWzHtoD6RNAYvCYYcEg/C8J\npos6QfdVTqUbZBJscPfpaeS7hGDgfFC4v4Xg12X0/F06Vz/dHxjuPi187LQvP8Gh7n5EZP8pCyYK\nZMzdrwyfXkLw67ySXd9ZnXWZ7DbxIsEyM/sBu4LL+QSzDJP5orv/LlKnLeGYwu9T5I8rI/lgfeJ1\nQDGgmmDyQqJ4T8WacLxvNcE1THtI/Hya2ZkEP15zRsEjd6qByZ5ev2BZVzRFw4HWbQS/9jI5bh7B\nF3I+dDozDMDdfxw+vc/MZgClKQaWe4IrzewWgmsSooPR9yfkW0gwo+4gYDDBv92ZJJ8d1VUy/oFh\nZu9jz1Zxsh9BAC+b2XHuPis89lhSt3rT9Q9gK8FnND5Qvtv/q3QmXpjZXe7+WYIfapXsmiTyDHBR\ninPHzMzi/48tmBVWnJgp7P6Nnz8GjAR+nJgvNDeStwVYDiQbu/tJ+MPiOwTjSAOBtC5GdPd/hAP9\nOaPgkTtpT+0k+FV9urunmhG1L0t7Zljil1iqbsAe4CKCCyOL2NVttVs3S+gBdn0pvkv3cHdfHnbH\n7MbMhiYGkHRb0JEvzyLgAjNbGe6PJ7ggdW+McfdTO8kTXQki1cSLKguuYr+QYOJFvPsLkg+MQ3BB\n4b3hhA0nGHtINnPwYwQX255I8EPg4STdU3GTCVp/J4RlPgfUJGZy9xnh021hfVNKGBeKt2ZyOqCt\nAfMuZrtPhTwSSGdqZx3QP8zXTBcM2vYWZvZ1gouhTiScGRadRRTJl/RLzN2/3l11TZeZvZbOhAMz\nW+DuU7qjTpFzznD3j6WYTZRsFtFC0mhBWydLi3j6U06TlX0TwaD7a53k63DiRfhZu4SgOykarOP/\n3/boZgpnm32JYADegMcI1k1rTcj3dYJxy3hr5kwg6ZR3M7uXYFzoT2HSecAQdz8nIV/aY6Fm9sfI\nbrw1c3OyySddRcGji4VTIQ34OcE0u/aXgJ+nGvQM+0ETFxJMOji2LzGznxBcszAPuI1giuEeH8p0\nv8R6AjO7GbjO3Tv8xZ3ul2IuhMH4WeA5d1/UQb7/A77uu1+g2C0irZlCgv8bywh+YMW/7KdG8iZO\nvDgRSDbxAjO7wd0v6eK6pj3l3cxeTRgXSpX2IkGrZC6RsVBP/8LSnFLwyJEMp8t+gWBtnzEEv6yP\nA1509w92S2XzzMyMYH76RQTN7XuBW919aSRP3r7EMhUGuoMIBmGTftmF+d4ADu4sX47q+AGCbpMT\nCX6Jv0wQSH4dvp5xCzoHdUy7NRMOyn84ceJF4hdyFnWYQDA+NJndf9glttDSnvJuZrcDNyaMC13o\n7l9JyJf2tO3wfBez5zUhGc3YzITGPLpYltNlv0HQ3J7l7ieb2USC1Wj7BHd3M1tLcDV2C0Hf8d/M\n7HGCgc9MrojuCTrrn487Lae16IAH1088Q/C5O5mgL38KwcWqEIwhxFvQZ0YOjad1Rx0z6epKa+JF\nFv5IsOjgdQR/p4tIPj7S6ZT3LMaFMhkLvYtgtYhTCJZI+Q+CCRk5o5ZHFwtnRwwhs9ksc9z9aDN7\nBTjW3Rsz+dXRm4V9xRcSXOV7C/APd28O+5oXEyyzkHE3oHTMzJ4kGGebSdA18nyy/vFMWtD5ZGa/\nIFi0MTrxYv7ezmI0s7nuXhUdxzKz59z9xCR5jyKyqkPilPd0W1IJ12wMIPix1LIr255joWb2sru/\nx3ZdRFtE0AWc6nqcvaaWRxfLcrrs3iwk2NsNJ1hJdrdfme7eZmYfc/eFAGZWlDgGZGb9urGe+5r5\nBMvCTyH4vG41s5nuvgOybkHn0yqCQBifeHFTsokXWdgZ/yFjwYKI7xJMw91DZ1Pe021JeXjNRjgu\n9RxBd2JnrYj4NSFbLVh+ZS3BQHvOqOXRw4QD7oOAf7p7U77rk2/RLzGC5c3jygnuV3B+Xiq2j7Bg\nmZeLCK6IH+3uJWF6xi3ofEp34kUW5R5N0P0zmOC6jYHAL9z9pb0tO41zdzgulZD3CwT3eTkcuJ2g\nxfIDd/9Dzuqn4CE9WW/7Eustwl/RJxK0Plawa+bVv/Jasb2QzsSLLMqsJlgFYTy7lobvlkkN4fkL\n2H1caoe7T0ySr4RdV+FH67nHwoxdRd1W0qNl2Q0onesHXAvMdfeWzjL3Bh1NvPCERQcz8Cfgvwju\nSNnROmVdLsm4VPsyPkk8QPD/ZC6RCSU5rZ9aHiLS23U28cLdD8qy3Oc9XN+su5nZdQQtw0aCcaZn\nCa4d2ZEkb7dfcKqWh4jsCzqceLEX5aa7TlmXc/dvwW7jUn8kWPKoJEn2F83s8O684FQtDxGRFMzs\nboJ1yl4nsk5ZLi++i5y703GpTK7C72pqeYiIpHZEsqvEu0k641J706raK2p5iIikkO46ZX2RgoeI\nSArprlPWFyl4iIikkGpJkQzX3donKXiIiEjGumLVSRER6WMUPEREJGMKHiKdMLPvmdnrZjbfzF4J\nb96Tq3M9Ha6nJNKj6ToPkQ6Y2XsJ5tIfFd5nZThQnOdqieSdWh4iHasANrp7I4C7b3T31Wb2P2Y2\nx8wWmNlN4Yqu8ZbDdWb2rJktNLOjzex+M1scLhuOmVWa2SIzuyNszfzNzMoST2xmHzGzmWY2z8z+\nL1ymAjO72szeCI+9phv/FiLtFDxEOvYYMNbM3jKz34f3WwG43t2PDhej68fuV/o2ufv7gRsJVju9\nlOCmS58zs2FhnkMJblg0FagluGdJu7CF833gQ+Gd/GqAb5vZUOAs4LDw2J/k4D2LdErBQ6QD7l5P\nsLbQNGAD8Fcz+xxwspm9FK4t9AHgsMhhD4aPrwGvu/uasOWyDBgbvvaOu8fvyHc3wU1/oo4DJgMv\nhLcnvpDgnhK1wE7gFjM7G2josjcrkgGNeYh0wt1bgaeBp8Ng8SVgKlDt7u+Y2Q+B0sgh8dVX29j9\n3gpt7Po/l3iBVeK+AY+7+x73MTGzY4APEtw576sEwUukW6nlIdIBMzvUzCZEko4E3gyfbwzHIT6Z\nRdHjwsF4CG509XzC67OA483s4LAeZWZ2SHi+Qe7+MPDNsD4i3U4tD5GODQB+a2aDCe5Ot4SgC2sr\nQbfUcmBOFuUuBC40sz8Ai4Eboi+6+4awe+ye8BajEIyB1AEPmFkpQevkW1mcW2SvaXkSkW5mZpXA\njO6+85tIV1K3lYiIZEwtDxERyZhaHiIikjEFDxERyZiCh4iIZEzBQ0REMqbgISIiGfv/FSw+qxMG\ng8cAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a0bf6c518>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "fdist.plot(30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n0TkQUj3ePgwAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a0caaeb00>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "fdist.plot(30, cumulative=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "tagged = nltk.pos_tag(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('***The', 'NN'),\n",
       " ('Project', 'NNP'),\n",
       " ('Gutenberg', 'NNP'),\n",
       " (\"'s\", 'POS'),\n",
       " ('Etext', 'NNP'),\n",
       " ('of', 'IN'),\n",
       " ('Shakespeare', 'NNP'),\n",
       " (\"'s\", 'POS'),\n",
       " ('First', 'NNP'),\n",
       " ('Folio***', 'NNP')]"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tagged[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "project world month time note day week goal end author set form right\n",
      "possibility word due printers exchanges wonder canon\n"
     ]
    }
   ],
   "source": [
    "text.similar(\"Tragedie\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the_of\n"
     ]
    }
   ],
   "source": [
    "text.common_contexts([\"death\", \"wonder\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYYAAAEWCAYAAABi5jCmAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4wLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvpW3flQAAIABJREFUeJzt3Xu8HWV97/HPF5CgBBO5aAUhGxXv\nSoStogazrYqgCHosBxWV4CVKa22g1EalsmPbUwWlcKoeixYDXhCl4kFbj1B1mx7uCSYBBATLRpG7\nGLkql/z6xzzjnpnMrMtea++1k/19v177tWY981xnZq1fZtZkHkUEZmZmua0G3QEzM5tZHBjMzKzE\ngcHMzEocGMzMrMSBwczMShwYzMysxIHBZixJ35N0ZI91LJH0/3us42pJI73U0U/92C6TaHNU0lem\ns00bHAcG6wtJ45Je3c86I+KgiDijn3UWSRqSFJLuS3+3S/qupNdU+vHciBibqn50a6q2i6SVkh5K\n2+JuSRdIetYk6un7sWDTy4HBDOZHxFxgb+AC4FxJSwbVGUnbDKpt4MS0LZ4C3AGsHGBfbEAcGGzK\nSTpY0lpJGyRdJOkFKf1p6V+m+6T3u0q6K79sI2lM0nsK9bxX0jWS7pX000K55ZJ+Xkh/02T6GRG3\nRcSpwCjwSUlbpfr/8C9gSS+WtFrSPekM4+SUnp99LJV0i6RbJf1loe9bFfr5a0nfkLRjpey7Jf0C\n+KGk7SR9JeXdIOlySU+qbpdU7/GSbpJ0h6QzJc2r1HukpF+kbfvRDrfFA8DXgOfVrZd0SLrEtiH1\n59kp/cvAHsB30pnHh7rdDzZ4Dgw2pdKX9+nA+4CdgH8GzpM0JyJ+Dvw18FVJjwO+BKysu2wj6TCy\nL+x3Ao8HDgF+nVb/HNgfmAesAL4i6ck9dPtbwBOBZ9asOxU4NSIeDzwN+EZl/SuBvYADgOWFSyof\nBN4ILAZ2BX4DfLZSdjHwbOC1wJFpPLuTbbf3Aw/W9GdJ+nsl8FRgLvCZSp5FaSyvAj6Wf4m3Imku\ncATwk5p1zwDOApYBuwD/ThYIto2IdwC/AN4QEXMj4sR2bdnM48BgU+29wD9HxKUR8Wi6Nv57YD+A\niPgCcD1wKfBkoOlftO8hu8xxeWRuiIibUh3fjIhbImJjRJyd6ntxD32+Jb3uWLPuYeDpknaOiPsi\n4pLK+hURcX9EXEkW6N6a0t8HfDQibo6I35MFuT+pXDYaTWUfTO3sBDw9bbc1EXFPTX+OAE6OiP+K\niPuADwNvqdS7IiIejIh1wDqyS2ZNjpO0AbiBLMgsqclzOPBvEXFBRDwMfAp4LPCyFvXaZsSBwaba\nAuAv0yWHDelLZ3eyfzXnvkB2yeKf0pdmnd3Jzgw2IemdhUtVG1JdO/fQ593S6901694NPAO4Nl3e\nObiy/peF5ZuYGOcCst8u8j5eAzwKPKmh7JeB7wNfT5emTpT0mJr+7JraKba5TaXe2wrLD5B94Tf5\nVETMj4g/iohD0lldyzYjYmPq+241eW0z5MBgU+2XwN+nL5v873ERcRb84ZLFKcC/AKP5dfeGep5W\nTZS0gCywfADYKSLmA1cB6qHPbyL74fW66oqIuD4i3kp2qemTwDmSti9k2b2wvAcTZx+/BA6qbIft\nIuJXxeoL7TwcESsi4jlk/xI/mOwyWtUtZEGn2OYjwO0djnUySm1KEtm487H4kc2bOQcG66fHpB9N\n879tyL603y/pJcpsL+n1knZIZU4F1kTEe4B/Az7fUPcXyS5z7JvqeXoKCtuTfRHdCSDpKBp+MG1H\n0pMkfQA4Afhw+pdwNc/bJe2S1m1IyY8WsvyNpMdJei5wFHB2Sv888Pepz0jaRdKhLfrySknPl7Q1\ncA/ZpaVHa7KeBRwjac8UZP8XcHZEPNLN2Lv0DeD1kl6VzmL+kuzy4EVp/e1kv3fYZsqBwfrp38l+\nIM3/RiNiNdnvDJ8h+8H1BtJ16/TFeCDZD6sAxwL7SDqiWnFEfBP4e7I7Ze4Fvg3sGBE/BT4NXEz2\nhfR84MIu+71B0v3AlcDrgMMi4vSGvAcCV0u6jyyovSUifldY/+M0xh+QXZY5P6WfCpwHnC/pXuAS\n4CUt+vRHwDlkQeGaVG/dfzA7neyy0yrgRuB3wJ+3Hm5vIuI64O3APwF3AW8g+7H5oZTlH4Dj02Wz\n46ayLzY15Il6zHonaYjsi/kxU/yvdbMp5zMGMzMrcWAwM7MSX0oyM7MSnzGYmVnJIB/WNWk777xz\nDA0NDbobZmablTVr1twVEbu0y7dZBoahoSFWr1496G6YmW1WJN3UPpcvJZmZWYUDg5mZlTgwmJlZ\niQODmZmVODCYmVmJA4OZmZU4MJiZWYkDg5mZlTgwmJlZiQODmZmVODCYmVmJA4OZmZU4MJiZWYkD\ng5mZlTgwmJlZyawODKOjm77mywAjI/V5RkZgu+3K+ebPz9JGRmBoKHsdGSmXbdWPdnmaytW9NqV1\nU2cvehlLcbkffZmMTvZXv+rqp6lsq27/tMrXaf6pMF1tV+vu9bifSWbknM8SAhTBxrr1w8PD0Y+J\neiSIKL9Ctpyvz99X89Tlq1Ms26ofxfp66X+xT5203VRnLyZTRz/63i+d7K9O+zWdY5jKtur2T6t8\nneafCtPVdrXuXo/76SBpTUQMt8s3sDMGiWMlrkp/yySGJK6R+BxwBbD7oPpmZjabDWRqT4l9gaOA\nlwACLgV+DDwTOCqCP920jJYCSwH22GOP6eusmdksM6gzhkXAuRHcH8F9wLeA/YGbIrikrkBEnBYR\nwxExvMsubeeyNjOzSRpUYGi6Kn//tPbCzMw2sfXoAH4WX7GCh4DlK1ZwxooVbAt8GjgF+B+jo3yu\nXfnTTjttdOnSpX3pS37nUPE1Xx4bgyVLNs0DcNttcPzxE/k2bMiWFy3KXhcuzO5OWrJk07JN/WiX\np6lc3WtTWjd19qKXsRSX+9GXyehkf/Wrrn6ayrbq9k+rfJ3mnwrT1Xa17l6P+6m2YsWKW0dHR09r\nl29gdyVJHAu8K739IvBt4LsRPK9d2X7dlWRmNpt0elfSQH58BojgZODkSnLboGBmZlNrVv8HNzMz\n25QDg5mZlTgwmJlZiQODmZmVODCYmVmJA4OZmZU4MJiZWYkDg5mZlTgwmJlZiQODmZmVODCYmVnJ\nlAUGia0lfiLx3fT+XyTWSayXOEdibko/VuKnKf0HEgumqk/tzNT5V83MptNUnjH8BXBN4f0xEewd\nwQuAXwAfSOk/AYZT+jnAiVPYp5ZWrBhUy2ZmM8eUBAaJpwCvJ3ucNgAR3JPWCXgsECn9RxE8kLJd\nAjxlKvpkZmadmaozhlOADwEbi4kSXwJuA54F/FNNuXcD36urUNJSSaslrb7zzjv73F0zM8v1PTBI\nHAzcEcGa6roIjgJ2JbvEdHil3NuBYeCkuno957OZ2fSYijOGlwOHSIwDXwf+WOIr+coIHgXOBt6c\np0m8GvgocEgEv5+CPpmZWYf6Hhgi+HAET4lgCHgL8EPgHRJPhz/8xvAG4Nr0/oXAP5MFhTv63Z9u\nnHDCIFs3M5sZpmtqTwFnSDw+La8Djk7rTgLmAt+UAPhFBIdMU79KfLuqmdkUB4YIxoCx9PblDXle\nPZV9MDOz7vh/PpuZWYkDg5mZlTgwmJlZiQODmZmVODCYmVmJA4OZmZU4MJiZWYkDg5mZlTgwmJlZ\niQODmZmVODCYmVmJAwMTD88bHZ34K6b3u51O07vNNzLSfT11dXaa1qmhocmXLRoZKdc11Q89bLed\nZopWfetnv6t15e+rx12/2hwZKdfVdHz3o72msbRrq9PPdLt87fLn/Zqu41ARMT0t1TUutongkW7L\nDQ8Px+rVq/vZDyKy11z+vp+bp6m+Tttpl28y9dSV6TStU/3ajvn+adX3fmq3nWaKVn3rZ7+rdRU/\nN3Xp/WgP2u+DfrTXNJZ2bXXap3b52uXvtH/tSFoTEcPt8k3qjEFiSOJaiS9KXCXxVYlXS1wocb3E\niyV2lPi2xHqJSyRekMqOSpwmcT5wpsTWEidJXJ7yvm8yfTIzs/7o5bHbTwcOA5YClwNvAxYBhwAf\nAX4J/CSCN0r8MXAmsDCV3RdYFMGDEkuB30bwIok5wIUS50dwY7ExSUtTW+yxxx49dNvMzFrp5TeG\nGyO4MoKNwNXADyII4EpgiCxIfBkggh8CO0nMS2XPi+DBtHwA8E6JtcClwE7AXtXGPOezmdn06OWM\noTg388bC+42p3rrfDvKrY/cX0gT8eQTf76EvZmbWJ1M5g9sq4AjgbyVGgLsiuKf4A2/yfeBoiR9G\n8LDEM4BfRZSCx5TK53quzvnc7zmgm+rrtJ12+RYv7r6eujo7TevUggWTL1u0eDGMj0+8n+o5uttt\np5miVd/62e+mz0f1uOtXm4sXl+8Sajq++9Fe01jatdXpZ7pdvnb5835N13E4qbuSJIaA70bwvPR+\nZXp/Tr4OeAXwJWBP4AFgaQTrJUaB+yL4VCq7FfB3wBvIzh7uBN4YwW+b2u/3XUlmZrNBp3clDfR2\n1clyYDAz696U3q5qZmZbLgcGMzMrcWAwM7MSBwYzMytxYDAzsxIHBjMzK3FgMDOzEgcGMzMrcWAw\nM7MSBwYzMytpGxgkHpVYW/hbntKXSTxusg1LfGSyZfshnzawOnXg5jKdo5nZVGn7rCSJ+yKYW5M+\nDgxHcNekGm6otxP9eFZSdRrPYtrmMJ2jmVm3pnpqzw8CuwI/kvhRSjtA4mKJKyS+KTFXYp7EdRLP\nTHnOknivxCeAx6YzkK9KbC/xbxLr0lShh0+mX2Zm1rtOzhgeJZuVLfcPEZxdPGOQ2Bn4FnBQBPdL\n/DUwJ4KPS7wG+DhwKrAkggNTvX84Y5B4M3BgBO9N7+dVH7tdmdpz35tuuqm3gfuMwcxmmU7PGDqZ\nqOfBiD/M1dxkP+A5ZPM1A2wLXAwQwQUShwGfBfZuKH8l8CmJT5LN6/Cf1QwRcRpwGmSXkjrot5mZ\nTUK/ZnATcEEEb91kRTYRz7OBB4EdgZureSL4mcS+wOuAf5A4P4KP96lvZmbWhV4Cw73ADsBdwCXA\nZyWeHsEN6W6lp0TwM+AY4BrgI8DpEi+N4GHgYYnHpOk8dwXujuArEvcBS3oZVCeq0wbWpc3k6RzN\nzKZKJ4HhsRJrC+//XwTLyS7rfE/i1gheKbEEOEtiTsp3fLqs9B7gxRHcK7EKOB44IZVfL3EFcCZw\nksRG4GHg6D6MraWxsfZpvl3VzGYjT+1pZjZLeGpPMzObFAcGMzMrcWAwM7MSBwYzMytxYDAzsxIH\nBjMzK3FgMDOzEgcGMzMrcWAwM7MSBwYzMytxYDAzs5KBBQaJiwbVdv5wvKGhbDl/omonD81rNSd0\nq/mjR0ayv/nz25etS89fi31tVaZu/uq6/lTbGRmZ2C7VftXNk11XPs+T11XsU25oqNzHVts+r69p\nm82fP1F33Ziq/W/qQ7GvrcpWx5q3Wdy3TeMrbptqf6uKeVqNv7pcTMvH1FSuqf3q/qorU3dMFfO2\nGlurfVo8fpvyVftV19d2ZYvbppiv1b6ua7uqOu5OvzOKfWj1GZuOh3vOyofo5TOzVWdx62TGtmKe\nav7qurze4vumtpraLva1+lqsv1qm2Far/lTH0qqfdfXW9bOqrr/dbPumduu2Rbv900kf6rZtXRvt\nyrdb18m468pU19eNtW68nZarK1tXptUx1Ms+bdLJ56Ouf+3KVsfbal9385ltaqeT74ym/dnp91ST\nGf8QvTTvAhIjEmMS50hcq2wO6BaHh5mZTaWZ8hvDC4FlZNODPhV4eTWDpKWSVktafeedd053/8zM\nZo2ZEhgui+DmCDYCa4GhaoaIOC0ihiNieJdddpn2DpqZzRYzJTD8vrD8KP2bi9rMzLo0K7+A87mc\nFyyAJUsmpvTsZI7nYp5q/uL76vzRixdnr2vXti9bl56/5vW06usJJ2RjajV/dV5Pdf3ixTA+nm2X\narm6ebLryud5xsayuop9yi1YMHHnTifjaZU+bx4sXDjRflO5av+rfViwoLm9YtnqWPNxzZs3sX7l\nyvrx5a95mep+qLZZ1+9cq2Ox2I9W5Zrar+6vujJNx1T1WG2qv1V69fhtV0/dfm/3ec73dzVvq31d\n13ZV02errkzTuqb92ardfhrYXUkS90UwV2IEOC6Cg1P6Z4DVEaxsKuupPc3MutfpXUkDO2OIYG56\nHQPGCukfGFCXzMyMmfMbg5mZzRAODGZmVuLAYGZmJQ4MZmZW4sBgZmYlDgxmZlbiwGBmZiUODGZm\nVuLAYGZmJQ4MZmZW4sBgZmYlkw4MEqdL3CFxVSFtb4mLJa6U+I7E41P6thJfSunr0oPz8jKHS6yX\nuFrixJ5G06PpmEvVzGym6+WMYSVwYCXti8DyCJ4PnAv8VUp/L0BKfw3waYmtJHYCTgJeFcFzgSdJ\nvKqHPvVkxYpBtWxmNnNMOjBEsAq4u5L8TGBVWr4AeHNafg7wg1TuDmADMEw2jefPIsjn6vyPQhkz\nMxuAfv/GcBVwSFo+DNg9La8DDpXYRmJPYN+07gbgWRJDEtsAbyyUKfGcz2Zm06PfgeFdwJ9JrAF2\nAB5K6acDNwOrgVOAi4BHIvgNcDRwNvCfwDjwSF3FnvPZzGx69HWingiuBQ4AkHgG8PqU/ghwTJ5P\n4iLg+rTuO8B3UvpSsjmfzcxsQPp6xiDxxPS6FXA88Pn0/nES26fl15CdLfy0UuYJwJ+S/YA9ENMx\nl6qZ2Uw36TMGibOAEWBniZuBE4C5En+WsnwL+FJafiLwfYmNwK+AdxSqOlVi77T88Qh+Ntk+9cq3\nq5qZ9RAYInhrw6pTa/KOk92x1E09ZmY2AP6fz2ZmVuLAYGZmJQ4MZmZW4sBgZmYlDgxmZlbiwGBm\nZiUODGZmVuLAYGZmJQ4MZmZW4sBgZmYlDgxmZlYybYFB4oMS10h8dbrabDI6OvHAvJGRclpxXdP7\nvFzTQ/fq0vN2RkYmlpvKNC13q9jvbvLXpVe3Q65uLN20WZe3qc5W5Ytlivu0mq8urVfV7dFt/1vV\nmx9n1eO12F6r8nm5oaHy/qtuo0763GpbdfJZmD8/ez801H1bdfuum7K5vO1Ox1L32e9Wr5/n6udv\nOigipqchcS1wUAQ3dpB3mzSHQ63h4eFYvXp1L30BICJbzl+LqmnF99Xluvqr6dV2mta3Wu5Wsc1O\n6mjKV7cd2vWvm35X83Y75uo2bRp33bbvZfvW1dHquJhMvUVNY2pqq+l4bTr+2/W5XVvtjoPqcdRN\nW91s11bbqJPxNuXvtP1O6uu2fK73Y1VrImK4Xb6+TtTT3Bk+Tza/83kSK4H90/sHgKURrJcYBXYF\nhoC7gLdNR9/MzKxsWi4lRfB+4BbglWRf/D+J4AXAR4AzC1n3BQ6N2DQoeM5nM7PpMYgfnxcBXwaI\n4IfAThLz0rrzIniwrpDnfDYzmx6DCAyqScuvnN0/nR0xM7NNTctvDBWrgCOAv5UYAe6K4J7qD21T\nqTi38+LFm6bV5asr13QnR11deTv5a6syTcvdyst2WkdTvnbboZu6OsnbVGer8mNjm5Zv1e9Wad3q\nZHtMtt6xsfJxVq2/VXvFfi1YAEuWlOst5umk3622VSfHzrx5sGwZrFzZfVu9HE/V7dCuvrrPXz8+\nh5OtZxBz0U/nXUnjwDCwkWwu6D3Z9Mfn+yL4VLu6er0rycxsNppRdyUBRDBUeHtozfrR6eqLmZk1\n8/98NjOzEgcGMzMrcWAwM7MSBwYzMytxYDAzsxIHBjMzK3FgMDOzEgcGMzMrcWAwM7MSBwYzMyuZ\nlYGhOkVlPu1hdfq86rSK22038X5oKFtfN01htZ58KsWhofLUgtX68+VW0y7m0yO2mlq0Os5qHcX2\n6/rdbprH6vZreq22Ux1XcdtVp1gtptdtz/xv/vxN0zqdjrVpGzZt1+JxUqy7aRzVOpumZ6xOf1lN\nL/az2Gbd9LR1fSmua5r2snhM5dOTVvPXjbduXNXjoLj/8zqL+61arlhvcarUpmk28/5Up3etHstN\nx0K1nbrPRV16sa1q/6r1Vo/TfLlpn1T36RY7tWc/9WNqz3bTeub5imlNT4Ctm6azqZ6mupqmEq2b\nSrNV29V+NE0p2DTNZTf1tnutttMuX90UinV96mR7VtNb1d1qmtVqelObnU4r2q69dtuk1XSfTVOc\ntmq/6TNQbaOpjk62QavPWauxdzvOduNtN9VpXZ+a6i/qdrxN7Rbrq8tTzTcZnT5Eb8acMUh8W2KN\nxNUSSwfdHzOz2WoQ8zE0eVcEd0s8Frhc4l8j+HW+UtJSyALGHnvsMag+mplt8WbMGQPwQYl1wCXA\n7sBexZWe2tPMbHrMiDOGNJPbq4GXRvCAxBiw3UA7ZWY2S82IwADMA36TgsKzgP2msrHqdH3FaQ+L\nqtN3zpkDy5dnyytXZncLjI831198PzZWzls3bWNertW0i/n0iNWydVpNOVmdDrOu/Xb1tnuttlOd\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a1549a2e8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "text.dispersion_plot(tokens[500:510])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25292"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['!',\n",
       " '#',\n",
       " '$',\n",
       " '%',\n",
       " '&',\n",
       " \"'\",\n",
       " \"''\",\n",
       " \"'Faith\",\n",
       " \"'Gainst\",\n",
       " \"'T\",\n",
       " \"'Tis\",\n",
       " \"'Twere\",\n",
       " \"'Twixt\",\n",
       " \"'boue\",\n",
       " \"'d\",\n",
       " \"'em\",\n",
       " \"'gainst\",\n",
       " \"'ginne\",\n",
       " \"'gins\",\n",
       " \"'re\",\n",
       " \"'s\",\n",
       " \"'t\",\n",
       " \"'tis\",\n",
       " \"'twer\",\n",
       " \"'twere\",\n",
       " \"'twould\",\n",
       " '(',\n",
       " ')',\n",
       " '*',\n",
       " '***',\n",
       " '******',\n",
       " '********************The',\n",
       " '*****This',\n",
       " '***START**THE',\n",
       " '***The',\n",
       " '**Etexts',\n",
       " '**FOR',\n",
       " '**Information',\n",
       " '**Welcome',\n",
       " '*BEFORE',\n",
       " '*EITHER*',\n",
       " '*END*THE',\n",
       " '*NOT*',\n",
       " '*These',\n",
       " '*WANT*',\n",
       " '*not*',\n",
       " ',',\n",
       " '-',\n",
       " '.',\n",
       " '.and',\n",
       " '.in',\n",
       " '.possibly',\n",
       " '.set',\n",
       " '.such',\n",
       " '.this',\n",
       " '.try',\n",
       " '.we',\n",
       " '.with',\n",
       " '/',\n",
       " '//promo.net/pg',\n",
       " '1',\n",
       " '1.Murth',\n",
       " '10',\n",
       " '10,000',\n",
       " '100,000,000',\n",
       " '1971**',\n",
       " '1999',\n",
       " '2',\n",
       " '2.Murth',\n",
       " '20',\n",
       " '200',\n",
       " '2000',\n",
       " '2000+',\n",
       " '2001',\n",
       " '2264',\n",
       " '2264.txt',\n",
       " '2264.zip******',\n",
       " '2782',\n",
       " '3',\n",
       " '3,333',\n",
       " '3.',\n",
       " '30',\n",
       " '31',\n",
       " '3rd',\n",
       " '432',\n",
       " '60',\n",
       " '61825',\n",
       " '7',\n",
       " '90',\n",
       " ':',\n",
       " ';',\n",
       " '=',\n",
       " '?',\n",
       " '@',\n",
       " 'A',\n",
       " 'ABOUT',\n",
       " 'ALL',\n",
       " 'ANY',\n",
       " 'ARE',\n",
       " 'AS',\n",
       " 'AS-IS',\n",
       " 'ASCII',\n",
       " 'Accents',\n",
       " 'According',\n",
       " 'Accounted',\n",
       " 'Accursed',\n",
       " 'Acheron',\n",
       " 'Acquaint',\n",
       " 'Act',\n",
       " 'Acting',\n",
       " 'Actions',\n",
       " 'Acts',\n",
       " 'Actus',\n",
       " 'Addage',\n",
       " 'Adde',\n",
       " 'Adders',\n",
       " 'Adieu',\n",
       " 'Aduise',\n",
       " 'Affaire',\n",
       " 'Affaires',\n",
       " 'Affection',\n",
       " 'After',\n",
       " 'Against',\n",
       " 'Agent',\n",
       " 'Agents',\n",
       " 'Ague',\n",
       " 'Alack',\n",
       " 'Alarme',\n",
       " 'Alarum',\n",
       " 'Alarums',\n",
       " 'Alas',\n",
       " 'Aleppo',\n",
       " 'All',\n",
       " 'Allegeance',\n",
       " 'Almost',\n",
       " 'Alreadie',\n",
       " 'Already',\n",
       " 'Am',\n",
       " 'Ambition',\n",
       " 'Amen',\n",
       " 'Among',\n",
       " 'An',\n",
       " 'And',\n",
       " 'Ang',\n",
       " 'Angell',\n",
       " 'Angels',\n",
       " 'Angus',\n",
       " 'Anon',\n",
       " 'Another',\n",
       " 'Answer',\n",
       " 'Anthonies',\n",
       " 'Antidote',\n",
       " 'Antique',\n",
       " 'Appar',\n",
       " 'Apparation',\n",
       " 'Apparition',\n",
       " 'Appetite',\n",
       " 'Approach',\n",
       " 'Approch',\n",
       " 'Arabia',\n",
       " 'Are',\n",
       " 'Arme',\n",
       " 'Armed',\n",
       " 'Armes',\n",
       " 'Armor',\n",
       " 'Armour',\n",
       " 'Army',\n",
       " 'Aroynt',\n",
       " 'Art',\n",
       " 'Artificiall',\n",
       " 'As',\n",
       " 'Assassination',\n",
       " 'Assisted',\n",
       " 'Association',\n",
       " 'Association/Carnegie-Mellon',\n",
       " 'At',\n",
       " 'Attend',\n",
       " 'Attendants',\n",
       " 'Auant',\n",
       " 'Auarice',\n",
       " 'Auaricious',\n",
       " 'Audit',\n",
       " 'Augures',\n",
       " 'Authoriz',\n",
       " 'Away',\n",
       " 'Ayre',\n",
       " 'Ayre-drawne-Dagger',\n",
       " 'BE',\n",
       " 'BREACH',\n",
       " 'BUT',\n",
       " 'Babe',\n",
       " 'Babes',\n",
       " 'Baboones',\n",
       " 'Baby',\n",
       " 'Baby-brow',\n",
       " 'Backe',\n",
       " 'Balles',\n",
       " 'Balme',\n",
       " 'Ban',\n",
       " 'Bane',\n",
       " 'Banke',\n",
       " 'Banners',\n",
       " 'Banq',\n",
       " 'Banquet',\n",
       " 'Banquets',\n",
       " 'Banquo',\n",
       " 'Banquoh',\n",
       " 'Bar',\n",
       " 'Barke',\n",
       " 'Barlet',\n",
       " 'Barnardo',\n",
       " 'Bat',\n",
       " 'Bath',\n",
       " 'Battaile',\n",
       " 'Battell',\n",
       " 'Battlements',\n",
       " 'Be',\n",
       " 'Beards',\n",
       " 'Beare',\n",
       " 'Beare-like',\n",
       " 'Beast',\n",
       " 'Beauteous',\n",
       " 'Bed',\n",
       " \"Bee't\",\n",
       " 'Beetle',\n",
       " 'Before',\n",
       " 'Began',\n",
       " 'Behold',\n",
       " 'Being',\n",
       " 'Beldams',\n",
       " 'Bell',\n",
       " 'Bell-man',\n",
       " 'Bellona',\n",
       " 'Belzebub',\n",
       " 'Benediction',\n",
       " 'Besides',\n",
       " 'Best',\n",
       " 'Bestride',\n",
       " 'Better',\n",
       " 'Beware',\n",
       " 'Bible',\n",
       " 'Bill',\n",
       " 'Bird',\n",
       " 'Birds',\n",
       " 'Birnan',\n",
       " 'Birnane',\n",
       " 'Birth',\n",
       " 'Birth-strangled',\n",
       " 'Birthdome',\n",
       " 'Blacke',\n",
       " 'Blade',\n",
       " 'Blanket',\n",
       " 'Blaspheming',\n",
       " 'Bleed',\n",
       " 'Blesse',\n",
       " 'Blessing',\n",
       " 'Blessings',\n",
       " 'Blinde-wormes',\n",
       " 'Blood',\n",
       " 'Blood-bolter',\n",
       " 'Bloody',\n",
       " 'Blowes',\n",
       " 'Bond',\n",
       " 'Bonelesse',\n",
       " 'Bones',\n",
       " 'Bonfire',\n",
       " 'Booke',\n",
       " 'Bosome',\n",
       " 'Bosomes',\n",
       " 'Botches',\n",
       " 'Both',\n",
       " 'Bough',\n",
       " 'Boughes',\n",
       " 'Boundlesse',\n",
       " 'Bounty',\n",
       " 'Box',\n",
       " 'Boy',\n",
       " 'Boyle',\n",
       " 'Braggart',\n",
       " 'Braine',\n",
       " 'Braines',\n",
       " 'Brandish',\n",
       " 'Breach',\n",
       " 'Brest',\n",
       " 'Brests',\n",
       " 'Bridegroome',\n",
       " 'Bring',\n",
       " 'Broke',\n",
       " 'Broyle',\n",
       " 'Buffets',\n",
       " 'Building',\n",
       " 'Businesse',\n",
       " 'But',\n",
       " 'Butcher',\n",
       " 'Buttrice',\n",
       " 'By',\n",
       " 'Byrnam',\n",
       " 'Byrnan',\n",
       " 'Byrnane',\n",
       " 'CMU',\n",
       " 'CONSEQUENTIAL',\n",
       " 'CONTRACT',\n",
       " 'Caesar',\n",
       " 'Caldron',\n",
       " 'Call',\n",
       " 'Cambridge',\n",
       " 'Came',\n",
       " 'Can',\n",
       " \"Can'st\",\n",
       " 'Cancell',\n",
       " 'Candle',\n",
       " 'Candles',\n",
       " 'Cannons',\n",
       " 'Cap',\n",
       " 'Capitall',\n",
       " 'Caps',\n",
       " 'Captaine',\n",
       " 'Captaines',\n",
       " 'Captiuitie',\n",
       " 'Card',\n",
       " 'Care',\n",
       " 'Carnegie-',\n",
       " 'Carnegie-Mellon',\n",
       " 'Carried',\n",
       " 'Cases',\n",
       " 'Castle',\n",
       " 'Castles',\n",
       " 'Cat',\n",
       " 'Catalogue',\n",
       " 'Cath',\n",
       " 'Cathnes',\n",
       " 'Cauldron',\n",
       " 'Caution',\n",
       " 'Cawdor',\n",
       " 'Cawdron',\n",
       " 'Censures',\n",
       " 'Centinell',\n",
       " 'Central',\n",
       " 'Ceremony',\n",
       " 'Cesterne',\n",
       " 'Challice',\n",
       " 'Chamber',\n",
       " 'Chamberlaines',\n",
       " 'Chambers',\n",
       " 'Champaign',\n",
       " 'Chance',\n",
       " 'Charme',\n",
       " 'Charmes',\n",
       " 'Charnell',\n",
       " 'Chawdron',\n",
       " 'Cheekes',\n",
       " 'Cheere',\n",
       " 'Cherubin',\n",
       " 'Chestnuts',\n",
       " 'Chickens',\n",
       " 'Chiefe',\n",
       " 'Childe',\n",
       " 'Childhood',\n",
       " 'Children',\n",
       " 'Childrens',\n",
       " 'Chimneys',\n",
       " 'Chops',\n",
       " 'Choughes',\n",
       " 'Christendome',\n",
       " 'Chuck',\n",
       " 'Churches',\n",
       " 'Clamor',\n",
       " 'Cleane',\n",
       " 'Cleanse',\n",
       " 'Clock',\n",
       " 'Closset',\n",
       " 'Clowd',\n",
       " 'Cloyster',\n",
       " 'Cock',\n",
       " 'Coigne',\n",
       " 'Colmekill',\n",
       " 'Colmes',\n",
       " 'Colours',\n",
       " 'Combustion',\n",
       " 'Come',\n",
       " 'Comes',\n",
       " 'Command',\n",
       " 'Commencing',\n",
       " 'Commends',\n",
       " 'Commission',\n",
       " 'Companions',\n",
       " 'Company',\n",
       " 'Compell',\n",
       " 'Computers',\n",
       " 'Concord',\n",
       " 'Conduct',\n",
       " 'Confess',\n",
       " 'Conflict',\n",
       " 'Confound',\n",
       " 'Confounds',\n",
       " 'Confronted',\n",
       " 'Confusion',\n",
       " 'Consequence',\n",
       " 'Consequences',\n",
       " 'Consider',\n",
       " 'Conspirers',\n",
       " 'Constancie',\n",
       " 'Contending',\n",
       " 'Conuert',\n",
       " 'Conuey',\n",
       " 'Coole',\n",
       " 'Cooz',\n",
       " 'Coppie',\n",
       " 'Copyright',\n",
       " 'Corne',\n",
       " 'Corner',\n",
       " 'Cosin',\n",
       " 'Cosine',\n",
       " 'Cosins',\n",
       " 'Could',\n",
       " 'Councell',\n",
       " 'Counsailers',\n",
       " 'Countrey',\n",
       " 'Countreyes',\n",
       " 'Countries',\n",
       " 'Country',\n",
       " 'Countryman',\n",
       " 'Courage',\n",
       " 'Course',\n",
       " 'Court',\n",
       " 'Cousin',\n",
       " 'Cousins',\n",
       " 'Cow',\n",
       " 'Coward',\n",
       " 'Cozen',\n",
       " 'Cozens',\n",
       " 'Cracks',\n",
       " 'Cradle',\n",
       " 'Craues',\n",
       " 'Crauing',\n",
       " 'Creation',\n",
       " 'Creepes',\n",
       " 'Crests',\n",
       " 'Crickets',\n",
       " 'Crime',\n",
       " 'Crow',\n",
       " 'Crown',\n",
       " 'Crowne',\n",
       " 'Crowned',\n",
       " 'Crueltie',\n",
       " 'Cruelty',\n",
       " 'Cry',\n",
       " 'Cumberland',\n",
       " 'Curbing',\n",
       " 'Cure',\n",
       " 'Curres',\n",
       " 'Curriors',\n",
       " 'Curse',\n",
       " 'Curses',\n",
       " 'Curtain',\n",
       " 'Custome',\n",
       " 'Cut',\n",
       " 'Cut-throats',\n",
       " 'Cyme',\n",
       " 'DAMAGES',\n",
       " 'DISCLAIMER',\n",
       " 'DISTRIBUTION',\n",
       " 'DO',\n",
       " 'DOMAIN',\n",
       " 'Dagger',\n",
       " 'Daggers',\n",
       " 'Dame',\n",
       " 'Dames',\n",
       " 'Damme',\n",
       " 'Damned',\n",
       " 'Dance',\n",
       " 'Darknesse',\n",
       " 'Daughters',\n",
       " 'David',\n",
       " 'Day',\n",
       " 'Dayes',\n",
       " 'Deadmans',\n",
       " 'Deale',\n",
       " 'Deare',\n",
       " 'Death',\n",
       " 'Deaths',\n",
       " 'Deceitfull',\n",
       " 'December',\n",
       " 'Deed',\n",
       " 'Deere',\n",
       " 'Defect',\n",
       " 'Defects',\n",
       " 'Demand',\n",
       " 'Demy-Wolues',\n",
       " 'Deny',\n",
       " 'Desart',\n",
       " 'Descend',\n",
       " 'Descends',\n",
       " 'Desire',\n",
       " 'Despite',\n",
       " 'Destinie',\n",
       " 'Destroying',\n",
       " 'Deuill',\n",
       " 'Deuill-Porter',\n",
       " 'Deuils',\n",
       " 'Deuotion',\n",
       " 'Diamond',\n",
       " 'Did',\n",
       " 'Didst',\n",
       " 'Dignities',\n",
       " 'Direction',\n",
       " 'Directly',\n",
       " 'Director',\n",
       " 'Direnesse',\n",
       " 'Disasters',\n",
       " 'Discomfort',\n",
       " 'Disdayning',\n",
       " 'Disease',\n",
       " 'Disguising',\n",
       " 'Dishes',\n",
       " 'Dishonors',\n",
       " 'Dismay',\n",
       " 'Dispaire',\n",
       " 'Dispute',\n",
       " 'Distinguishes',\n",
       " 'Ditch-deliuer',\n",
       " 'Diuell',\n",
       " 'Diuellish',\n",
       " 'Diuine',\n",
       " 'Do',\n",
       " 'Doct',\n",
       " 'Doctor',\n",
       " 'Doe',\n",
       " 'Dogge',\n",
       " 'Dogges',\n",
       " 'Dogs',\n",
       " 'Dollars',\n",
       " 'Dolour',\n",
       " 'Domain',\n",
       " 'Don',\n",
       " 'Donal',\n",
       " 'Donalbaine',\n",
       " 'Donalbane',\n",
       " 'Donations*',\n",
       " 'Doome',\n",
       " 'Doomes',\n",
       " 'Doore',\n",
       " 'Doores',\n",
       " 'Double',\n",
       " 'Doubtfull',\n",
       " 'Down',\n",
       " 'Downey',\n",
       " 'Drab',\n",
       " 'Dragon',\n",
       " 'Dreames',\n",
       " 'Drinke',\n",
       " 'Drum',\n",
       " 'Drumme',\n",
       " 'Dudgeon',\n",
       " 'Due',\n",
       " 'Duff',\n",
       " 'Duncan',\n",
       " 'Duncane',\n",
       " 'Duncans',\n",
       " 'Dunsinane',\n",
       " 'Dunsmane',\n",
       " 'Duties',\n",
       " \"Dy'de\",\n",
       " 'Dying',\n",
       " 'EBCDIC',\n",
       " 'ETEXT',\n",
       " 'ETEXTS',\n",
       " 'ETEXTS**START***',\n",
       " 'ETEXTS*Ver.04.29.93*END*',\n",
       " 'EVEN',\n",
       " 'EXPRESS',\n",
       " 'Each',\n",
       " 'Eagles',\n",
       " 'Eare',\n",
       " 'Earles',\n",
       " 'Earth',\n",
       " 'East',\n",
       " 'Eccho',\n",
       " 'Ecclipse',\n",
       " 'Edward',\n",
       " 'Egge',\n",
       " 'Electronic',\n",
       " 'Elues',\n",
       " 'Eminence',\n",
       " 'Enemie',\n",
       " 'England',\n",
       " 'English',\n",
       " 'Enough',\n",
       " 'Enter',\n",
       " 'Entrailes',\n",
       " 'Envernes',\n",
       " 'Epicures',\n",
       " 'Equiuocation',\n",
       " 'Equiuocator',\n",
       " 'Ere',\n",
       " 'Ermites',\n",
       " 'Erre',\n",
       " 'Estate',\n",
       " 'Esteeme',\n",
       " 'Etext',\n",
       " 'Etexts',\n",
       " 'Euen',\n",
       " 'Euents',\n",
       " 'Euery',\n",
       " 'Euill',\n",
       " 'Euils',\n",
       " 'Everything',\n",
       " 'Example',\n",
       " 'Except',\n",
       " 'Excite',\n",
       " 'Executive',\n",
       " 'Exeunt',\n",
       " 'Exit',\n",
       " 'Expire',\n",
       " 'Eye',\n",
       " 'Eye-bals',\n",
       " 'Eyes',\n",
       " 'FINIS',\n",
       " 'FITNESS',\n",
       " 'FOR',\n",
       " 'FTP',\n",
       " 'Face',\n",
       " 'Faces',\n",
       " 'Fact',\n",
       " 'Faculties',\n",
       " 'Faile',\n",
       " 'Faire',\n",
       " 'Fairies',\n",
       " 'Faith',\n",
       " 'Faith-breach',\n",
       " 'False',\n",
       " 'Famine',\n",
       " 'Fancies',\n",
       " 'Far',\n",
       " 'Fare',\n",
       " 'Farewell',\n",
       " 'Farmer',\n",
       " 'Farrow',\n",
       " 'Farwell',\n",
       " 'Fatall',\n",
       " 'Fate',\n",
       " 'Father',\n",
       " 'Father-lesse',\n",
       " 'Fathers',\n",
       " 'Faulcon',\n",
       " 'Feare',\n",
       " 'Feares',\n",
       " 'Feast',\n",
       " 'Feasts',\n",
       " 'Feat',\n",
       " 'Fee-griefe',\n",
       " 'Feed',\n",
       " 'Fell',\n",
       " 'Fellow',\n",
       " 'Fellowes',\n",
       " 'Fenny',\n",
       " 'Feuer',\n",
       " 'Feuorous',\n",
       " 'Fie',\n",
       " 'Field',\n",
       " 'Fiend',\n",
       " 'Fiend-like',\n",
       " 'Fiends',\n",
       " 'Fife',\n",
       " 'Fiffe',\n",
       " 'Fight',\n",
       " 'Fighting',\n",
       " 'File',\n",
       " 'Files',\n",
       " 'Fillet',\n",
       " 'Filthy',\n",
       " 'Finding',\n",
       " 'Finger',\n",
       " 'Fire',\n",
       " 'First',\n",
       " 'Fit',\n",
       " 'Flame',\n",
       " 'Fleance',\n",
       " 'Fleans',\n",
       " 'Fled',\n",
       " 'Flourish',\n",
       " 'Flower',\n",
       " 'Flowers',\n",
       " 'Flye',\n",
       " 'Flyes',\n",
       " 'Foe',\n",
       " 'Foes',\n",
       " 'Foggy',\n",
       " 'Folio',\n",
       " 'Folio***',\n",
       " 'Foole',\n",
       " 'Fooles',\n",
       " 'Fools',\n",
       " 'For',\n",
       " 'Force',\n",
       " 'Forke',\n",
       " 'Forrest',\n",
       " 'Fortifies',\n",
       " 'Fortitude',\n",
       " 'Fortune',\n",
       " 'Foule',\n",
       " 'Foundations',\n",
       " 'Fountaine',\n",
       " 'Foysons',\n",
       " 'Frailties',\n",
       " 'Fran',\n",
       " 'Free',\n",
       " 'French',\n",
       " 'Friend',\n",
       " 'Friends',\n",
       " 'Frogge',\n",
       " 'From',\n",
       " 'Front',\n",
       " 'Fume',\n",
       " 'Function',\n",
       " 'Fury',\n",
       " 'Fye',\n",
       " 'GET',\n",
       " 'GIVE',\n",
       " 'GUTENBERG',\n",
       " 'GUTENBERG-',\n",
       " 'GUTENBERG-TM',\n",
       " 'GUTENBERG-tm',\n",
       " 'GUTINDEX.',\n",
       " 'GUTINDEX.99',\n",
       " 'GUTINDEX.ALL',\n",
       " 'Gall',\n",
       " 'Gallowgrosses',\n",
       " 'Garments',\n",
       " 'Gashes',\n",
       " 'Gate',\n",
       " 'Geese',\n",
       " 'Geneva',\n",
       " 'Genius',\n",
       " 'Gent',\n",
       " 'Gentle',\n",
       " 'Gentleman',\n",
       " 'Gentlemen',\n",
       " 'Gentlewoman',\n",
       " 'Gentry',\n",
       " 'Germaine',\n",
       " 'Get',\n",
       " 'Ghost',\n",
       " 'Ghosts',\n",
       " 'Giants',\n",
       " 'Gibbet',\n",
       " 'Gin',\n",
       " 'Girle',\n",
       " 'Giue',\n",
       " 'Giuen',\n",
       " 'Give',\n",
       " 'Glamis',\n",
       " 'Glamys',\n",
       " 'Go',\n",
       " 'Goal',\n",
       " 'Goate',\n",
       " 'God',\n",
       " 'God-eyld',\n",
       " 'Gods',\n",
       " 'Goe',\n",
       " 'Goes',\n",
       " 'Gold-bound-brow',\n",
       " 'Golden',\n",
       " 'Golgotha',\n",
       " 'Gone',\n",
       " 'Good',\n",
       " 'Goose',\n",
       " 'Goose-looke',\n",
       " 'Gorgon',\n",
       " 'Gospell',\n",
       " 'Gouts',\n",
       " 'Grace',\n",
       " 'Graces',\n",
       " 'Gracious',\n",
       " 'Graine',\n",
       " 'Grandam',\n",
       " 'Grapples',\n",
       " 'Graspe',\n",
       " 'Graue',\n",
       " 'Graues',\n",
       " 'Gray-Malkin',\n",
       " 'Great',\n",
       " 'Greater',\n",
       " 'Greatnesse',\n",
       " 'Greaze',\n",
       " 'Greene',\n",
       " 'Grewell',\n",
       " 'Greyhounds',\n",
       " 'Griefes',\n",
       " 'Gripe',\n",
       " 'Groomes',\n",
       " 'Groue',\n",
       " 'Guardian',\n",
       " 'Guest',\n",
       " 'Guests',\n",
       " 'Guilt',\n",
       " 'Gulfe',\n",
       " 'Gummes',\n",
       " 'Gutenberg',\n",
       " 'Gutenberg/CMU',\n",
       " 'HAVE',\n",
       " 'Ha',\n",
       " 'Had',\n",
       " 'Hagges',\n",
       " 'Hags',\n",
       " 'Haile',\n",
       " 'Hall',\n",
       " 'Hamlet',\n",
       " 'Hand',\n",
       " 'Handle',\n",
       " 'Hands',\n",
       " 'Hang',\n",
       " 'Hanging',\n",
       " 'Hangmans',\n",
       " 'Harbingers',\n",
       " 'Hare',\n",
       " 'Harnesse',\n",
       " 'Harpier',\n",
       " 'Hart',\n",
       " 'Haruest',\n",
       " 'Hath',\n",
       " 'Haue',\n",
       " 'Hay',\n",
       " 'Hayle',\n",
       " 'He',\n",
       " 'Head',\n",
       " 'Health',\n",
       " 'Heap',\n",
       " 'Heare',\n",
       " 'Heark',\n",
       " 'Hearke',\n",
       " 'Heart',\n",
       " 'Hearts',\n",
       " 'Heath',\n",
       " 'Heauen',\n",
       " 'Heauens',\n",
       " 'Hec',\n",
       " 'Hecat',\n",
       " 'Heccats',\n",
       " 'Hedge-Pigge',\n",
       " 'Hee',\n",
       " 'Heere',\n",
       " 'Heire',\n",
       " 'Hell',\n",
       " 'Hell-Kite',\n",
       " 'Hell-broth',\n",
       " 'Hell-hound',\n",
       " 'Helpe',\n",
       " 'Hemlocke',\n",
       " 'Hence',\n",
       " 'Henceforth',\n",
       " 'Her',\n",
       " 'Herbenger',\n",
       " 'Here',\n",
       " 'Herein',\n",
       " 'High',\n",
       " 'Highnesse',\n",
       " 'Hill',\n",
       " 'Himselfe',\n",
       " 'Hircan',\n",
       " 'His',\n",
       " 'Hoast',\n",
       " 'Hoboyes',\n",
       " 'Hold',\n",
       " 'Holy',\n",
       " 'Homage',\n",
       " 'Honor',\n",
       " 'Honors',\n",
       " 'Honour',\n",
       " 'Hopes',\n",
       " 'Horrible',\n",
       " 'Horse',\n",
       " 'Horses',\n",
       " 'Hose',\n",
       " 'Host',\n",
       " 'Hostesse',\n",
       " 'Houer',\n",
       " 'Hounds',\n",
       " 'Houre',\n",
       " 'Houres',\n",
       " 'House',\n",
       " 'House-keeper',\n",
       " 'How',\n",
       " 'Howlets',\n",
       " 'Humans',\n",
       " 'Humh',\n",
       " 'Hundreds',\n",
       " 'Hunter',\n",
       " 'Hurley-burley',\n",
       " 'Husband',\n",
       " 'Husbandry',\n",
       " 'Hye',\n",
       " 'I',\n",
       " \"I'faith\",\n",
       " \"I'th\",\n",
       " 'I.',\n",
       " 'IF',\n",
       " 'IL',\n",
       " 'IMPLIED',\n",
       " 'INCIDENTAL',\n",
       " 'INCLUDING',\n",
       " 'INDEMNITY',\n",
       " 'INDIRECT',\n",
       " 'IS',\n",
       " 'IT',\n",
       " 'Ideot',\n",
       " 'Iealousies',\n",
       " 'Iew',\n",
       " 'Iewell',\n",
       " 'Iewels',\n",
       " 'If',\n",
       " 'Il',\n",
       " 'Ile',\n",
       " 'Image',\n",
       " 'Images',\n",
       " 'Imaginings',\n",
       " 'Impediments',\n",
       " 'Imperiall',\n",
       " 'Impostors',\n",
       " 'In',\n",
       " 'Inchanting',\n",
       " 'Industrious',\n",
       " 'Infected',\n",
       " 'Infirme',\n",
       " 'Information',\n",
       " 'Ingratitude',\n",
       " 'Ingredience',\n",
       " 'Inhabitants',\n",
       " 'Inne',\n",
       " 'Instructions',\n",
       " 'Instrument',\n",
       " 'Instruments',\n",
       " 'Intelligence',\n",
       " 'Interdiction',\n",
       " 'Interim',\n",
       " 'Into',\n",
       " 'Inuenter',\n",
       " 'Iouiall',\n",
       " 'Iourney',\n",
       " 'Ioyes',\n",
       " 'Ireland',\n",
       " 'Is',\n",
       " \"Is't\",\n",
       " 'Isles',\n",
       " 'Issue',\n",
       " 'It',\n",
       " 'Iudgement',\n",
       " 'Iudicious',\n",
       " 'Iugling',\n",
       " 'Iustice',\n",
       " 'Iutty',\n",
       " 'July',\n",
       " 'KIND',\n",
       " 'Kalender',\n",
       " 'Keepe',\n",
       " 'Keepes',\n",
       " 'Kernes',\n",
       " 'Key',\n",
       " 'Killing',\n",
       " 'Kinde',\n",
       " 'King',\n",
       " 'King-becoming',\n",
       " 'Kingdome',\n",
       " 'Kingdomes',\n",
       " 'Kings',\n",
       " 'Kinsman',\n",
       " 'Kinsmen',\n",
       " 'Knell',\n",
       " 'Knife',\n",
       " 'Knock',\n",
       " 'Knocke',\n",
       " 'Knocking',\n",
       " 'Know',\n",
       " 'Kytes',\n",
       " 'LIABILITY',\n",
       " 'LIMITED',\n",
       " 'La',\n",
       " 'Labor',\n",
       " 'Labors',\n",
       " 'Lad',\n",
       " 'Lady',\n",
       " 'Lambe',\n",
       " 'Lampe',\n",
       " 'Land',\n",
       " 'Lands',\n",
       " 'Lappe',\n",
       " 'Largesse',\n",
       " 'Laugh',\n",
       " 'Lay',\n",
       " 'Layes',\n",
       " 'Lead',\n",
       " 'Leade',\n",
       " 'Leafe',\n",
       " 'Lease',\n",
       " 'Least',\n",
       " 'Leaue',\n",
       " 'Lecherie',\n",
       " 'Led',\n",
       " 'Lees',\n",
       " 'Legges',\n",
       " ...]"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted(set(text))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.18986240708524435"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(set(text))/len(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "text.count(\"Tragedie\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.023722916337181717"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100*text.count(\"Tragedie\")/len(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from nltk.corpus import stopwords"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'a',\n",
       " 'about',\n",
       " 'above',\n",
       " 'after',\n",
       " 'again',\n",
       " 'against',\n",
       " 'ain',\n",
       " 'all',\n",
       " 'am',\n",
       " 'an',\n",
       " 'and',\n",
       " 'any',\n",
       " 'are',\n",
       " 'aren',\n",
       " \"aren't\",\n",
       " 'as',\n",
       " 'at',\n",
       " 'be',\n",
       " 'because',\n",
       " 'been',\n",
       " 'before',\n",
       " 'being',\n",
       " 'below',\n",
       " 'between',\n",
       " 'both',\n",
       " 'but',\n",
       " 'by',\n",
       " 'can',\n",
       " 'couldn',\n",
       " \"couldn't\",\n",
       " 'd',\n",
       " 'did',\n",
       " 'didn',\n",
       " \"didn't\",\n",
       " 'do',\n",
       " 'does',\n",
       " 'doesn',\n",
       " \"doesn't\",\n",
       " 'doing',\n",
       " 'don',\n",
       " \"don't\",\n",
       " 'down',\n",
       " 'during',\n",
       " 'each',\n",
       " 'few',\n",
       " 'for',\n",
       " 'from',\n",
       " 'further',\n",
       " 'had',\n",
       " 'hadn',\n",
       " \"hadn't\",\n",
       " 'has',\n",
       " 'hasn',\n",
       " \"hasn't\",\n",
       " 'have',\n",
       " 'haven',\n",
       " \"haven't\",\n",
       " 'having',\n",
       " 'he',\n",
       " 'her',\n",
       " 'here',\n",
       " 'hers',\n",
       " 'herself',\n",
       " 'him',\n",
       " 'himself',\n",
       " 'his',\n",
       " 'how',\n",
       " 'i',\n",
       " 'if',\n",
       " 'in',\n",
       " 'into',\n",
       " 'is',\n",
       " 'isn',\n",
       " \"isn't\",\n",
       " 'it',\n",
       " \"it's\",\n",
       " 'its',\n",
       " 'itself',\n",
       " 'just',\n",
       " 'll',\n",
       " 'm',\n",
       " 'ma',\n",
       " 'me',\n",
       " 'mightn',\n",
       " \"mightn't\",\n",
       " 'more',\n",
       " 'most',\n",
       " 'mustn',\n",
       " \"mustn't\",\n",
       " 'my',\n",
       " 'myself',\n",
       " 'needn',\n",
       " \"needn't\",\n",
       " 'no',\n",
       " 'nor',\n",
       " 'not',\n",
       " 'now',\n",
       " 'o',\n",
       " 'of',\n",
       " 'off',\n",
       " 'on',\n",
       " 'once',\n",
       " 'only',\n",
       " 'or',\n",
       " 'other',\n",
       " 'our',\n",
       " 'ours',\n",
       " 'ourselves',\n",
       " 'out',\n",
       " 'over',\n",
       " 'own',\n",
       " 're',\n",
       " 's',\n",
       " 'same',\n",
       " 'shan',\n",
       " \"shan't\",\n",
       " 'she',\n",
       " \"she's\",\n",
       " 'should',\n",
       " \"should've\",\n",
       " 'shouldn',\n",
       " \"shouldn't\",\n",
       " 'so',\n",
       " 'some',\n",
       " 'such',\n",
       " 't',\n",
       " 'than',\n",
       " 'that',\n",
       " \"that'll\",\n",
       " 'the',\n",
       " 'their',\n",
       " 'theirs',\n",
       " 'them',\n",
       " 'themselves',\n",
       " 'then',\n",
       " 'there',\n",
       " 'these',\n",
       " 'they',\n",
       " 'this',\n",
       " 'those',\n",
       " 'through',\n",
       " 'to',\n",
       " 'too',\n",
       " 'under',\n",
       " 'until',\n",
       " 'up',\n",
       " 've',\n",
       " 'very',\n",
       " 'was',\n",
       " 'wasn',\n",
       " \"wasn't\",\n",
       " 'we',\n",
       " 'were',\n",
       " 'weren',\n",
       " \"weren't\",\n",
       " 'what',\n",
       " 'when',\n",
       " 'where',\n",
       " 'which',\n",
       " 'while',\n",
       " 'who',\n",
       " 'whom',\n",
       " 'why',\n",
       " 'will',\n",
       " 'with',\n",
       " 'won',\n",
       " \"won't\",\n",
       " 'wouldn',\n",
       " \"wouldn't\",\n",
       " 'y',\n",
       " 'you',\n",
       " \"you'd\",\n",
       " \"you'll\",\n",
       " \"you're\",\n",
       " \"you've\",\n",
       " 'your',\n",
       " 'yours',\n",
       " 'yourself',\n",
       " 'yourselves'}"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set(stopwords.words('english'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "stop_words = set(stopwords.words('english'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "filter_text = [word for word in text if not word in stop_words ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['***The',\n",
       " 'Project',\n",
       " 'Gutenberg',\n",
       " \"'s\",\n",
       " 'Etext',\n",
       " 'Shakespeare',\n",
       " \"'s\",\n",
       " 'First',\n",
       " 'Folio***',\n",
       " '********************The']"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filter_text[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "sent = ['Tragedie', 'me', 'King', '.']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Tragedie', 'me', 'King', '.']"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Tragedie'"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sent[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "sent.append('stever')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Tragedie', 'me', 'King', '.', 'stever']"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sent.index('stever')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "saying = ['After', 'all', 'is', 'said', 'and', 'done', 'more', 'is', 'said',\n",
    "         'than', 'done']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "tokens =set (saying)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'After', 'all', 'and', 'done', 'is', 'more', 'said', 'than'}"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tokens"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "tokens = sorted(tokens)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['said', 'than']"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tokens[-2:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "long_words = [w for w in text if len(w)>5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['***The',\n",
       " 'Project',\n",
       " 'Gutenberg',\n",
       " 'Shakespeare',\n",
       " 'Folio***',\n",
       " '********************The',\n",
       " 'Tragedie',\n",
       " 'Macbeth*********************',\n",
       " 'edition',\n",
       " 'Copyright',\n",
       " 'changing',\n",
       " 'copyright',\n",
       " 'country',\n",
       " 'before',\n",
       " 'posting',\n",
       " 'Please',\n",
       " 'important',\n",
       " 'information',\n",
       " 'header',\n",
       " 'encourage',\n",
       " 'keeping',\n",
       " 'electronic',\n",
       " 'readers',\n",
       " 'remove',\n",
       " '**Welcome',\n",
       " 'Vanilla',\n",
       " 'Electronic',\n",
       " 'Texts**',\n",
       " '**Etexts',\n",
       " 'Readable',\n",
       " 'Humans',\n",
       " 'Computers',\n",
       " '1971**',\n",
       " '*These',\n",
       " 'Etexts',\n",
       " 'Prepared',\n",
       " 'Hundreds',\n",
       " 'Volunteers',\n",
       " 'Donations*',\n",
       " 'Information',\n",
       " 'contacting',\n",
       " 'Project',\n",
       " 'Gutenberg',\n",
       " 'Etexts',\n",
       " 'further',\n",
       " 'information',\n",
       " 'included',\n",
       " 'donations',\n",
       " 'Tragedie',\n",
       " 'Macbeth',\n",
       " 'William',\n",
       " 'Shakespeare',\n",
       " '***The',\n",
       " 'Project',\n",
       " 'Gutenberg',\n",
       " 'Shakespeare',\n",
       " 'Folio***',\n",
       " '********************The',\n",
       " 'Tragedie',\n",
       " 'Macbeth*********************',\n",
       " '*****This',\n",
       " 'should',\n",
       " '2264.txt',\n",
       " '2264.zip******',\n",
       " 'Project',\n",
       " 'Gutenberg',\n",
       " 'Etexts',\n",
       " 'usually',\n",
       " 'created',\n",
       " 'multiple',\n",
       " 'editions',\n",
       " 'Public',\n",
       " 'Domain',\n",
       " 'United',\n",
       " 'States',\n",
       " 'unless',\n",
       " 'copyright',\n",
       " 'notice',\n",
       " 'included',\n",
       " 'Therefore',\n",
       " 'usually',\n",
       " 'compliance',\n",
       " 'particular',\n",
       " 'edition',\n",
       " 'trying',\n",
       " 'release',\n",
       " 'advance',\n",
       " 'official',\n",
       " 'release',\n",
       " 'leaving',\n",
       " 'better',\n",
       " 'editing',\n",
       " 'Please',\n",
       " 'neither',\n",
       " 'contents',\n",
       " 'midnight',\n",
       " 'announcement',\n",
       " 'official',\n",
       " 'release',\n",
       " 'Project',\n",
       " 'Gutenberg',\n",
       " 'Etexts',\n",
       " 'Midnight',\n",
       " 'Central',\n",
       " 'stated',\n",
       " 'preliminary',\n",
       " 'version',\n",
       " 'posted',\n",
       " 'suggestion',\n",
       " 'comment',\n",
       " 'editing',\n",
       " 'edition',\n",
       " 'xxxxx10x.xxx',\n",
       " 'please',\n",
       " 'program',\n",
       " 'scrambles',\n",
       " 'failed',\n",
       " 'Information',\n",
       " 'Project',\n",
       " 'Gutenberg',\n",
       " 'produce',\n",
       " 'million',\n",
       " 'dollars',\n",
       " 'rather',\n",
       " 'conservative',\n",
       " 'estimate',\n",
       " 'selected',\n",
       " 'entered',\n",
       " 'proofread',\n",
       " 'edited',\n",
       " 'copyright',\n",
       " 'searched',\n",
       " 'analyzed',\n",
       " 'copyright',\n",
       " 'letters',\n",
       " 'written',\n",
       " 'projected',\n",
       " 'audience',\n",
       " 'hundred',\n",
       " 'million',\n",
       " 'readers',\n",
       " 'nominally',\n",
       " 'estimated',\n",
       " 'dollar',\n",
       " 'produce',\n",
       " 'million',\n",
       " 'dollars',\n",
       " 'release',\n",
       " 'thirty-six',\n",
       " 'Etexts',\n",
       " 'computerized',\n",
       " 'population',\n",
       " 'should',\n",
       " 'billion',\n",
       " 'Etexts',\n",
       " 'Project',\n",
       " 'Gutenberg',\n",
       " 'Trillion',\n",
       " 'December',\n",
       " '10,000',\n",
       " '100,000,000',\n",
       " 'Trillion',\n",
       " 'thousand',\n",
       " 'titles',\n",
       " 'hundred',\n",
       " 'million',\n",
       " 'readers',\n",
       " 'present',\n",
       " 'number',\n",
       " 'computer',\n",
       " 'revised',\n",
       " 'production',\n",
       " 'one-third',\n",
       " 'Etexts',\n",
       " 'unless',\n",
       " 'manage',\n",
       " 'funding',\n",
       " 'currently',\n",
       " 'funding',\n",
       " 'mostly',\n",
       " 'Michael',\n",
       " 'salary',\n",
       " 'Carnegie-Mellon',\n",
       " 'University',\n",
       " 'assortment',\n",
       " 'sporadic',\n",
       " 'salary',\n",
       " 'looking',\n",
       " 'something',\n",
       " 'replace',\n",
       " 'Project',\n",
       " 'Gutenberg',\n",
       " 'dependent',\n",
       " 'person',\n",
       " 'donations',\n",
       " 'donations',\n",
       " 'should',\n",
       " 'Project',\n",
       " 'Gutenberg/CMU',\n",
       " 'deductible',\n",
       " 'extent',\n",
       " 'allowable',\n",
       " 'Carnegie-',\n",
       " 'Mellon',\n",
       " 'University',\n",
       " 'matters',\n",
       " 'please',\n",
       " 'Project',\n",
       " 'Gutenberg',\n",
       " 'Champaign',\n",
       " 'Executive',\n",
       " 'Director',\n",
       " 'Michael',\n",
       " 'pobox.com',\n",
       " 'forwards',\n",
       " 'prairienet.org',\n",
       " 'archive.org',\n",
       " 'bounces',\n",
       " 'archive.org',\n",
       " 'bounces',\n",
       " 'prairienet.org',\n",
       " 'better',\n",
       " 'resend',\n",
       " 'prefer',\n",
       " 'information',\n",
       " '******',\n",
       " 'access',\n",
       " 'Project',\n",
       " 'Gutenberg',\n",
       " 'etexts',\n",
       " 'browser',\n",
       " '//promo.net/pg',\n",
       " 'Etexts',\n",
       " 'author',\n",
       " 'includes',\n",
       " 'information',\n",
       " 'involved',\n",
       " 'Project',\n",
       " 'Gutenberg',\n",
       " 'download',\n",
       " 'Newsletters',\n",
       " 'subscribe',\n",
       " 'please',\n",
       " 'pobox.com',\n",
       " 'complete',\n",
       " 'various',\n",
       " 'directly',\n",
       " 'collections',\n",
       " 'browser',\n",
       " 'Project',\n",
       " 'Gutenberg',\n",
       " 'mirror',\n",
       " 'mirror',\n",
       " 'available',\n",
       " 'continents',\n",
       " 'mirrors',\n",
       " 'listed',\n",
       " '//promo.net/pg',\n",
       " 'typing',\n",
       " 'better',\n",
       " 'Example',\n",
       " 'session',\n",
       " 'sunsite.unc.edu',\n",
       " 'anonymous',\n",
       " 'password',\n",
       " 'pub/docs/books/gutenberg',\n",
       " 'etext90',\n",
       " 'through',\n",
       " 'etext99',\n",
       " 'GUTINDEX.',\n",
       " 'listing',\n",
       " 'GUTINDEX.99',\n",
       " 'GUTINDEX.ALL',\n",
       " 'listing',\n",
       " '**Information',\n",
       " 'prepared',\n",
       " 'Project',\n",
       " 'Gutenberg',\n",
       " 'advisor**',\n",
       " '***START**THE',\n",
       " 'PUBLIC',\n",
       " 'DOMAIN',\n",
       " 'ETEXTS**START***',\n",
       " 'statement',\n",
       " 'lawyers',\n",
       " 'something',\n",
       " 'someone',\n",
       " 'things',\n",
       " 'statement',\n",
       " 'disclaims',\n",
       " 'liability',\n",
       " 'distribute',\n",
       " 'copies',\n",
       " '*BEFORE',\n",
       " 'reading',\n",
       " 'PROJECT',\n",
       " 'GUTENBERG-tm',\n",
       " 'indicate',\n",
       " 'understand',\n",
       " 'accept',\n",
       " 'statement',\n",
       " 'receive',\n",
       " 'refund',\n",
       " 'sending',\n",
       " 'request',\n",
       " 'within',\n",
       " 'receiving',\n",
       " 'person',\n",
       " 'received',\n",
       " 'physical',\n",
       " 'medium',\n",
       " 'return',\n",
       " 'request',\n",
       " 'PROJECT',\n",
       " 'GUTENBERG-TM',\n",
       " 'ETEXTS',\n",
       " 'PROJECT',\n",
       " 'GUTENBERG-tm',\n",
       " 'PROJECT',\n",
       " 'GUTENBERG-',\n",
       " 'etexts',\n",
       " 'public',\n",
       " 'domain',\n",
       " 'distributed',\n",
       " 'Professor',\n",
       " 'Michael',\n",
       " 'through',\n",
       " 'Project',\n",
       " 'Gutenberg',\n",
       " 'Association',\n",
       " 'Carnegie-Mellon',\n",
       " 'University',\n",
       " 'Project',\n",
       " 'things',\n",
       " 'United',\n",
       " 'States',\n",
       " 'copyright',\n",
       " 'Project',\n",
       " 'distribute',\n",
       " 'United',\n",
       " 'States',\n",
       " 'without',\n",
       " 'permission',\n",
       " 'without',\n",
       " 'paying',\n",
       " 'copyright',\n",
       " 'royalties',\n",
       " 'Special',\n",
       " 'distribute',\n",
       " 'Project',\n",
       " 'PROJECT',\n",
       " 'GUTENBERG',\n",
       " 'trademark',\n",
       " 'create',\n",
       " 'etexts',\n",
       " 'Project',\n",
       " 'expends',\n",
       " 'considerable',\n",
       " 'efforts',\n",
       " 'identify',\n",
       " 'transcribe',\n",
       " 'proofread',\n",
       " 'public',\n",
       " 'domain',\n",
       " 'Despite',\n",
       " 'efforts',\n",
       " 'Project',\n",
       " 'etexts',\n",
       " 'medium',\n",
       " 'contain',\n",
       " 'Defects',\n",
       " 'things',\n",
       " 'Defects',\n",
       " 'incomplete',\n",
       " 'inaccurate',\n",
       " 'corrupt',\n",
       " 'transcription',\n",
       " 'errors',\n",
       " 'copyright',\n",
       " 'intellectual',\n",
       " 'property',\n",
       " 'infringement',\n",
       " 'defective',\n",
       " 'damaged',\n",
       " 'medium',\n",
       " 'computer',\n",
       " 'computer',\n",
       " 'damage',\n",
       " 'equipment',\n",
       " 'LIMITED',\n",
       " 'WARRANTY',\n",
       " 'DISCLAIMER',\n",
       " 'DAMAGES',\n",
       " 'Replacement',\n",
       " 'Refund',\n",
       " 'described',\n",
       " 'Project',\n",
       " 'receive',\n",
       " 'PROJECT',\n",
       " 'GUTENBERG-tm',\n",
       " 'disclaims',\n",
       " 'liability',\n",
       " 'damages',\n",
       " 'expenses',\n",
       " 'including',\n",
       " 'REMEDIES',\n",
       " 'NEGLIGENCE',\n",
       " 'STRICT',\n",
       " 'LIABILITY',\n",
       " 'BREACH',\n",
       " 'WARRANTY',\n",
       " 'CONTRACT',\n",
       " 'INCLUDING',\n",
       " 'LIMITED',\n",
       " 'INDIRECT',\n",
       " 'CONSEQUENTIAL',\n",
       " 'PUNITIVE',\n",
       " 'INCIDENTAL',\n",
       " 'DAMAGES',\n",
       " 'NOTICE',\n",
       " 'POSSIBILITY',\n",
       " 'DAMAGES',\n",
       " 'discover',\n",
       " 'Defect',\n",
       " 'within',\n",
       " 'receiving',\n",
       " 'receive',\n",
       " 'refund',\n",
       " 'sending',\n",
       " 'explanatory',\n",
       " 'within',\n",
       " 'person',\n",
       " 'received',\n",
       " 'received',\n",
       " 'physical',\n",
       " 'medium',\n",
       " 'return',\n",
       " 'person',\n",
       " 'choose',\n",
       " 'alternatively',\n",
       " 'replacement',\n",
       " 'received',\n",
       " 'electronically',\n",
       " 'person',\n",
       " 'choose',\n",
       " 'alternatively',\n",
       " 'second',\n",
       " 'opportunity',\n",
       " 'receive',\n",
       " 'electronically',\n",
       " 'OTHERWISE',\n",
       " 'PROVIDED',\n",
       " 'WARRANTIES',\n",
       " 'EXPRESS',\n",
       " 'IMPLIED',\n",
       " 'MEDIUM',\n",
       " 'INCLUDING',\n",
       " 'LIMITED',\n",
       " 'WARRANTIES',\n",
       " 'MERCHANTABILITY',\n",
       " 'FITNESS',\n",
       " 'PARTICULAR',\n",
       " 'PURPOSE',\n",
       " 'states',\n",
       " 'disclaimers',\n",
       " 'implied',\n",
       " 'warranties',\n",
       " 'exclusion',\n",
       " 'limitation',\n",
       " 'consequential',\n",
       " 'damages',\n",
       " 'disclaimers',\n",
       " 'exclusions',\n",
       " 'rights',\n",
       " 'INDEMNITY',\n",
       " 'indemnify',\n",
       " 'Project',\n",
       " 'directors',\n",
       " 'officers',\n",
       " 'members',\n",
       " 'agents',\n",
       " 'harmless',\n",
       " 'liability',\n",
       " 'expense',\n",
       " 'including',\n",
       " 'directly',\n",
       " 'indirectly',\n",
       " 'following',\n",
       " 'distribution',\n",
       " 'alteration',\n",
       " 'modification',\n",
       " 'addition',\n",
       " 'Defect',\n",
       " 'DISTRIBUTION',\n",
       " 'PROJECT',\n",
       " 'GUTENBERG-tm',\n",
       " 'distribute',\n",
       " 'copies',\n",
       " 'electronically',\n",
       " 'medium',\n",
       " 'either',\n",
       " 'delete',\n",
       " 'references',\n",
       " 'Project',\n",
       " 'Gutenberg',\n",
       " 'copies',\n",
       " 'things',\n",
       " 'requires',\n",
       " 'remove',\n",
       " 'modify',\n",
       " 'statement',\n",
       " 'however',\n",
       " 'distribute',\n",
       " 'machine',\n",
       " 'readable',\n",
       " 'binary',\n",
       " 'compressed',\n",
       " 'mark-up',\n",
       " 'proprietary',\n",
       " 'including',\n",
       " 'resulting',\n",
       " 'conversion',\n",
       " 'cessing',\n",
       " 'hypertext',\n",
       " 'software',\n",
       " '*EITHER*',\n",
       " 'displayed',\n",
       " 'clearly',\n",
       " 'readable',\n",
       " 'contain',\n",
       " 'characters',\n",
       " 'intended',\n",
       " 'author',\n",
       " 'although',\n",
       " 'asterisk',\n",
       " 'underline',\n",
       " 'characters',\n",
       " 'convey',\n",
       " 'punctuation',\n",
       " 'intended',\n",
       " 'author',\n",
       " 'additional',\n",
       " 'characters',\n",
       " 'indicate',\n",
       " 'hypertext',\n",
       " 'readily',\n",
       " 'converted',\n",
       " 'reader',\n",
       " 'expense',\n",
       " 'EBCDIC',\n",
       " 'equivalent',\n",
       " 'program',\n",
       " 'displays',\n",
       " 'instance',\n",
       " 'processors',\n",
       " 'provide',\n",
       " 'provide',\n",
       " 'request',\n",
       " 'additional',\n",
       " 'expense',\n",
       " 'original',\n",
       " 'EBCDIC',\n",
       " 'equivalent',\n",
       " 'proprietary',\n",
       " 'refund',\n",
       " 'replacement',\n",
       " 'provisions',\n",
       " 'statement',\n",
       " 'trademark',\n",
       " 'license',\n",
       " 'Project',\n",
       " 'profits',\n",
       " 'derive',\n",
       " 'calculated',\n",
       " 'method',\n",
       " 'already',\n",
       " 'calculate',\n",
       " 'applicable',\n",
       " 'derive',\n",
       " 'profits',\n",
       " 'royalty',\n",
       " 'Royalties',\n",
       " 'payable',\n",
       " 'Project',\n",
       " 'Gutenberg',\n",
       " 'Association/Carnegie-Mellon',\n",
       " 'University',\n",
       " 'within',\n",
       " 'following',\n",
       " 'prepare',\n",
       " 'legally',\n",
       " 'required',\n",
       " 'prepare',\n",
       " 'annual',\n",
       " 'equivalent',\n",
       " 'periodic',\n",
       " 'return',\n",
       " '*WANT*',\n",
       " 'Project',\n",
       " 'gratefully',\n",
       " 'accepts',\n",
       " 'contributions',\n",
       " 'scanning',\n",
       " 'machines',\n",
       " 'software',\n",
       " 'public',\n",
       " 'domain',\n",
       " 'etexts',\n",
       " 'royalty',\n",
       " 'copyright',\n",
       " 'licenses',\n",
       " 'contribution',\n",
       " 'should',\n",
       " 'Project',\n",
       " 'Gutenberg',\n",
       " 'Association',\n",
       " 'Carnegie-Mellon',\n",
       " 'University',\n",
       " '*END*THE',\n",
       " 'PUBLIC',\n",
       " 'DOMAIN',\n",
       " 'ETEXTS*Ver.04.29.93*END*',\n",
       " 'Project',\n",
       " 'Gutenberg',\n",
       " 'Shakespeare',\n",
       " 'Tragedie',\n",
       " 'Macbeth',\n",
       " 'Executive',\n",
       " 'Director',\n",
       " 'addition',\n",
       " 'spelling',\n",
       " 'errors',\n",
       " 'introduced',\n",
       " 'printers',\n",
       " 'corrected',\n",
       " 'Hamlet',\n",
       " 'presented',\n",
       " 'herein',\n",
       " 'Barnardo',\n",
       " 'answer',\n",
       " 'vnfold',\n",
       " 'understand',\n",
       " 'printers',\n",
       " 'certain',\n",
       " 'letters',\n",
       " 'packed',\n",
       " 'cliche',\n",
       " 'original',\n",
       " 'meaning',\n",
       " 'cliche',\n",
       " 'unwilling',\n",
       " 'unpack',\n",
       " 'cliches',\n",
       " 'substitutions',\n",
       " 'exchanges',\n",
       " 'wonder',\n",
       " 'presuming',\n",
       " 'Shakespeare',\n",
       " 'actually',\n",
       " 'manner',\n",
       " 'answer',\n",
       " 'packed',\n",
       " 'cliche',\n",
       " '.possibly',\n",
       " 'having',\n",
       " 'common',\n",
       " 'practice',\n",
       " 'expensive',\n",
       " 'selection',\n",
       " 'characters',\n",
       " 'errors',\n",
       " 'mentioned',\n",
       " 'places',\n",
       " 'scholars',\n",
       " 'extreme',\n",
       " 'attachment',\n",
       " 'errors',\n",
       " 'accorded',\n",
       " 'Shakespeare',\n",
       " 'father',\n",
       " 'assortment',\n",
       " 'available',\n",
       " 'Cambridge',\n",
       " 'University',\n",
       " 'England',\n",
       " 'several',\n",
       " 'months',\n",
       " 'constructed',\n",
       " 'purpose',\n",
       " 'knowledge',\n",
       " 'available',\n",
       " 'detail',\n",
       " 'determined',\n",
       " 'various',\n",
       " 'changes',\n",
       " 'Shakespeare',\n",
       " 'likely',\n",
       " 'nearly',\n",
       " 'variety',\n",
       " 'errors',\n",
       " 'credit',\n",
       " 'though',\n",
       " 'in/famous',\n",
       " 'signing',\n",
       " 'several',\n",
       " 'different',\n",
       " 'spellings',\n",
       " 'please',\n",
       " 'account',\n",
       " 'reading',\n",
       " 'comments',\n",
       " 'volunteer',\n",
       " 'prepared',\n",
       " 'errors',\n",
       " 'errors',\n",
       " 'caveat',\n",
       " 'changed',\n",
       " 'errors',\n",
       " 'Project',\n",
       " 'Gutenberg',\n",
       " 'Shakespeare',\n",
       " 'Tragedie',\n",
       " 'Macbeth',\n",
       " 'Michael',\n",
       " 'Project',\n",
       " 'Gutenberg',\n",
       " 'Executive',\n",
       " 'Director',\n",
       " 'Scanner',\n",
       " 'Shakespeare',\n",
       " 'printed',\n",
       " 'elongated',\n",
       " 'changed',\n",
       " 'conjoined',\n",
       " 'changed',\n",
       " 'spelling',\n",
       " 'punctuation',\n",
       " 'capitalization',\n",
       " 'possible',\n",
       " 'printed',\n",
       " 'corrected',\n",
       " 'spelling',\n",
       " 'mistakes',\n",
       " 'together',\n",
       " 'spelling',\n",
       " 'dictionary',\n",
       " 'devised',\n",
       " 'spellings',\n",
       " 'Geneva',\n",
       " 'Shakespeare',\n",
       " 'unified',\n",
       " 'spellings',\n",
       " 'according',\n",
       " 'template',\n",
       " 'expanded',\n",
       " 'abbreviations',\n",
       " 'across',\n",
       " 'Everything',\n",
       " 'within',\n",
       " 'brackets',\n",
       " 'delete',\n",
       " 'everything',\n",
       " 'within',\n",
       " 'brackets',\n",
       " 'Shakespeare',\n",
       " 'Another',\n",
       " 'should',\n",
       " 'textual',\n",
       " 'differences',\n",
       " 'between',\n",
       " 'various',\n",
       " 'copies',\n",
       " 'differences',\n",
       " 'mentioned',\n",
       " 'between',\n",
       " 'editions',\n",
       " \"printer's\",\n",
       " 'setting',\n",
       " 'running',\n",
       " 'number',\n",
       " 'copies',\n",
       " 'proofing',\n",
       " 'printed',\n",
       " 'correcting',\n",
       " 'continuing',\n",
       " 'printing',\n",
       " 'thrown',\n",
       " 'incorporated',\n",
       " 'printed',\n",
       " 'copies',\n",
       " 'composite',\n",
       " 'different',\n",
       " 'editions',\n",
       " 'scanning',\n",
       " 'errors',\n",
       " 'punctuation',\n",
       " 'errors',\n",
       " 'disagree',\n",
       " 'spelling',\n",
       " 'choices',\n",
       " 'please',\n",
       " 'errors',\n",
       " 'possible',\n",
       " 'address',\n",
       " 'haradda',\n",
       " 'aol.com',\n",
       " 'davidr',\n",
       " 'inconnect.com',\n",
       " 'Tragedie',\n",
       " 'Macbeth',\n",
       " 'Primus',\n",
       " 'Scoena',\n",
       " 'Thunder',\n",
       " 'Lightning',\n",
       " 'Witches',\n",
       " 'againe',\n",
       " 'Thunder',\n",
       " 'Lightning',\n",
       " 'Hurley-burley',\n",
       " 'Battaile',\n",
       " 'Macbeth',\n",
       " 'Gray-Malkin',\n",
       " 'Padock',\n",
       " 'through',\n",
       " 'filthie',\n",
       " 'Exeunt',\n",
       " 'Secunda',\n",
       " 'Alarum',\n",
       " 'within',\n",
       " 'Malcome',\n",
       " 'Donalbaine',\n",
       " 'attendants',\n",
       " 'meeting',\n",
       " 'bleeding',\n",
       " 'Captaine',\n",
       " 'bloody',\n",
       " 'report',\n",
       " 'seemeth',\n",
       " 'plight',\n",
       " 'Reuolt',\n",
       " 'newest',\n",
       " 'Serieant',\n",
       " 'hardie',\n",
       " 'Souldier',\n",
       " 'fought',\n",
       " \"'Gainst\",\n",
       " 'Captiuitie',\n",
       " 'friend',\n",
       " 'knowledge',\n",
       " 'Broyle',\n",
       " 'Doubtfull',\n",
       " 'Swimmers',\n",
       " 'together',\n",
       " 'choake',\n",
       " 'mercilesse',\n",
       " 'Macdonwald',\n",
       " 'Worthie',\n",
       " 'Rebell',\n",
       " 'multiplying',\n",
       " 'Villanies',\n",
       " 'Nature',\n",
       " 'swarme',\n",
       " 'Westerne',\n",
       " 'Kernes',\n",
       " 'Gallowgrosses',\n",
       " 'supply',\n",
       " 'Fortune',\n",
       " 'damned',\n",
       " 'Quarry',\n",
       " 'smiling',\n",
       " 'Rebells',\n",
       " 'Macbeth',\n",
       " 'deserues',\n",
       " 'Disdayning',\n",
       " 'Fortune',\n",
       " 'brandisht',\n",
       " 'Steele',\n",
       " 'bloody',\n",
       " 'execution',\n",
       " 'Valours',\n",
       " 'Minion',\n",
       " 'passage',\n",
       " 'shooke',\n",
       " 'farwell',\n",
       " 'vnseam',\n",
       " 'Battlements',\n",
       " 'valiant',\n",
       " 'Cousin',\n",
       " 'worthy',\n",
       " 'Gentleman',\n",
       " 'whence',\n",
       " 'reflection',\n",
       " 'Shipwracking',\n",
       " 'Stormes',\n",
       " 'direfull',\n",
       " 'Thunders',\n",
       " 'Spring',\n",
       " 'whence',\n",
       " 'comfort',\n",
       " 'Discomfort',\n",
       " 'swells',\n",
       " 'Scotland',\n",
       " 'sooner',\n",
       " 'Iustice',\n",
       " 'Valour',\n",
       " 'Compell',\n",
       " 'skipping',\n",
       " 'Kernes',\n",
       " 'heeles',\n",
       " 'Norweyan',\n",
       " 'surueying',\n",
       " 'vantage',\n",
       " 'furbusht',\n",
       " 'supplyes',\n",
       " 'assault',\n",
       " 'Dismay',\n",
       " 'Captaines',\n",
       " 'Macbeth',\n",
       " 'Banquoh',\n",
       " 'Sparrowes',\n",
       " 'Eagles',\n",
       " 'report',\n",
       " 'Cannons',\n",
       " 'ouer-charg',\n",
       " 'double',\n",
       " 'Cracks',\n",
       " 'doubly',\n",
       " 'redoubled',\n",
       " 'stroakes',\n",
       " 'Except',\n",
       " 'reeking',\n",
       " 'Wounds',\n",
       " 'memorize',\n",
       " 'another',\n",
       " 'Golgotha',\n",
       " 'Gashes',\n",
       " 'become',\n",
       " 'wounds',\n",
       " 'Surgeons',\n",
       " 'worthy',\n",
       " 'lookes',\n",
       " 'through',\n",
       " 'should',\n",
       " 'seemes',\n",
       " 'speake',\n",
       " 'things',\n",
       " 'strange',\n",
       " 'Whence',\n",
       " \"cam'st\",\n",
       " 'worthy',\n",
       " 'Norweyan',\n",
       " 'Banners',\n",
       " 'people',\n",
       " 'Norway',\n",
       " 'himselfe',\n",
       " 'terrible',\n",
       " 'numbers',\n",
       " 'Assisted',\n",
       " 'disloyall',\n",
       " 'Traytor',\n",
       " 'Cawdor',\n",
       " 'dismall',\n",
       " 'Conflict',\n",
       " 'Bellona',\n",
       " 'Bridegroome',\n",
       " 'proofe',\n",
       " 'Confronted',\n",
       " 'selfe-comparisons',\n",
       " 'against',\n",
       " 'rebellious',\n",
       " \"'gainst\",\n",
       " 'Curbing',\n",
       " 'lauish',\n",
       " 'spirit',\n",
       " 'conclude',\n",
       " 'Victorie',\n",
       " 'happinesse',\n",
       " 'Norwayes',\n",
       " 'Craues',\n",
       " 'composition',\n",
       " 'deigne',\n",
       " 'buriall',\n",
       " 'disbursed',\n",
       " 'Colmes',\n",
       " 'thousand',\n",
       " 'Dollars',\n",
       " 'generall',\n",
       " 'Cawdor',\n",
       " 'deceiue',\n",
       " 'Bosome',\n",
       " 'interest',\n",
       " 'pronounce',\n",
       " 'present',\n",
       " 'former',\n",
       " 'Macbeth',\n",
       " 'Macbeth',\n",
       " 'Exeunt',\n",
       " 'Tertia',\n",
       " 'Thunder',\n",
       " 'Witches',\n",
       " ...]"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "long_words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('against', 'above'),\n",
       " ('above', 'all'),\n",
       " ('all', 'further'),\n",
       " ('further', 'from')]"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(nltk.bigrams(['against', 'above', 'all', 'further', 'from']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Project Gutenberg; Enter Macbeth; Small Print; Scena Secunda; PROJECT\n",
      "GUTENBERG-tm; ten thousand; three Witches; good Lord; Executive\n",
      "Director; United States; public domain; thou art; Fire burne; Scena\n",
      "Prima; worthy Thane; Carnegie-Mellon University; weyward Sisters; mine\n",
      "owne; haue done; Cauldron bubble\n"
     ]
    }
   ],
   "source": [
    "text.collocations()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['austen-emma.txt',\n",
       " 'austen-persuasion.txt',\n",
       " 'austen-sense.txt',\n",
       " 'bible-kjv.txt',\n",
       " 'blake-poems.txt',\n",
       " 'bryant-stories.txt',\n",
       " 'burgess-busterbrown.txt',\n",
       " 'carroll-alice.txt',\n",
       " 'chesterton-ball.txt',\n",
       " 'chesterton-brown.txt',\n",
       " 'chesterton-thursday.txt',\n",
       " 'edgeworth-parents.txt',\n",
       " 'melville-moby_dick.txt',\n",
       " 'milton-paradise.txt',\n",
       " 'shakespeare-caesar.txt',\n",
       " 'shakespeare-hamlet.txt',\n",
       " 'shakespeare-macbeth.txt',\n",
       " 'whitman-leaves.txt']"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nltk.corpus.gutenberg.fileids()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
